<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Mind on Mind</title>
 <link href="http://yangzetian.github.com/atom.xml" rel="self"/>
 <link href="http://yangzetian.github.com"/>
 <updated>2012-05-10T22:17:52+08:00</updated>
 <id>http://yangzetian.github.com</id>
 <author>
   <name>Zetian Yang</name>
   <email>zetain.yang@gmail.com</email>
 </author>

 
 <entry>
   <title>BUAA Story : slides using pandoc and dzslides</title>
   <link href="http://yangzetian.github.com/2012/05/10/buaa-story"/>
   <updated>2012-05-10T22:11:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/05/10/buaa-story</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;今天下午学校搞德育答辩，要求每个人做三分钟左右的展示。之前在&lt;a href=&quot;http://yihui.name/en/2012/04/fancy-html5-slides-with-knitr-and-pandoc/&quot;&gt;益辉&lt;/a&gt;的博客上看到过非常炫的 html5 &lt;a href=&quot;http://inundata.org/R_talks/meetup/&quot;&gt;幻灯片&lt;/a&gt;，所以趁这个机会自己也尝试了一把。实际证明效果还是不错的，打算以后就放弃 bearmer 转投 html5+css+js 的门下了。&lt;/p&gt;
&lt;p&gt;我的这个展示用 &lt;a href=&quot;http://markdown.tw/&quot;&gt;Markdown&lt;/a&gt; 编写，之后借助 &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;Pandoc&lt;/a&gt; 转换成 &lt;a href=&quot;http://paulrouget.com/dzslides/&quot;&gt;dzslides&lt;/a&gt;。源文件可以从&lt;a href=&quot;http://github.com/yangzetian/BUAA-Story&quot;&gt;这里&lt;/a&gt;获取，也可以&lt;a href=&quot;http://yangzetian.github.com/BUAA-Story&quot;&gt;在线&lt;/a&gt;观看最终效果&lt;sup&gt;&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;这里顺便介绍一下目前我知道的 html 幻灯片制作方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一种就是我使用的 &lt;a href=&quot;http://paulrouget.com/dzslides/&quot;&gt;dzslides&lt;/a&gt;，它其实是一个 html 模板，利用 CSS3 实现了每张展示间的切换，它支持在幻灯片中直接使用 html5 元素。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种比较方便的方法是使用 Google 提供的 html5 &lt;a href=&quot;http://code.google.com/p/html5slides/&quot;&gt;模板&lt;/a&gt;。用法和 dzslides 类似。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三种是绚丽的 &lt;a href=&quot;http://imakewebthings.com/deck.js/&quot;&gt;deck.js&lt;/a&gt;。这玩意儿真是太炫了，刚才提到的 R 介绍就是用它做的。 可惜目前我还不懂 JavaScript，但有这么漂亮的应用，JavaScript 已经排在我的学习列表里了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;注意一定&lt;em&gt;不要&lt;/em&gt;用 IE 观看这个展示，推荐火狐或者 Chrome。另外由于这个展示里有很多图片，而我又是直接把图片放在 &lt;a href=&quot;http://github.com/yangzetian/BUAA-Story&quot;&gt;Github&lt;/a&gt; 上的，所以加载速度会很慢。我比较推荐把源码库克隆到本地后观看，如果你执意在线查看，那好，请打开链接后泡杯茶，待三十分钟后再回来 :-)&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>民谣与博客</title>
   <link href="http://yangzetian.github.com/2012/04/19/folk-blog"/>
   <updated>2012-04-19T21:09:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/04/19/folk-blog</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;昨晚在图书馆六层，借着不太明亮的灯光和偶尔闪过的雷光，终于读完了&lt;a href=&quot;http://book.douban.com/subject/3178741/&quot;&gt;《来自民间的叛逆》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;书中让我印象最深刻的不是那些美国民谣歌手们成功的曲折过程，也不是他们糜烂的个人生活，而是作者在前沿中对本书写作过程的介绍。作者从95年开始撰写本书，直至01年底完成80万字的初稿，最后删去约20万字后于03年出版。按作者自己的说法，这本书花去了他七年间全部的业余时间。这样的恒心和毅力不得不让人肃然起敬。作者这般心血的最终成果，便是展现在我面前的这本由700多页密密麻麻小字讲述的美国20年代民谣史，另外作者得以从此以写字为生，成为文化工作者。&lt;/p&gt;
&lt;p&gt;这本书绝不仅仅只是一部民谣史，它更像是美国文化史，除了主要讲述的那些民谣歌手，还几乎介绍了美国20年代发生的所有重大政治、经济、文化事件。也只有在这样详细介绍的美国社会大背景下，那些由借音乐之名引发的其他故事才更生动精彩。书中我最喜欢的内容包括60年代的嬉皮运动；所有和毒品、迷幻剂相关的人物事迹；两位被人忽视的民谣歌手：&lt;a href=&quot;http://en.wikipedia.org/wiki/Tim_Buckley&quot;&gt;蒂姆·巴克利&lt;/a&gt;（Tim Buckley）和&lt;a href=&quot;http://music.douban.com/musician/102593/&quot;&gt;尼克·德雷克&lt;/a&gt;（Nick Drake）。其中在介绍德雷克那张『Five Leaves Left』专辑时与欧·亨利那篇『The Last Leaf』的类比让人叫绝，也更加反衬出德雷克的不幸的一生。&lt;/p&gt;
&lt;p&gt;回想自从上月5号在二层新书架上见到这本书至现在已过去一个半月，这期间我并不是只读了这本书。但有趣的是，这本书将最近读的另外两本书串联了起来，它们分别是&lt;a href=&quot;http://book.douban.com/subject/1223765/&quot;&gt;《请宰了我》&lt;/a&gt;和&lt;a href=&quot;http://book.douban.com/subject/2090728/&quot;&gt;《LSD：我的问题少年》&lt;/a&gt;，前一本同样是介绍美国音乐故事的，但主角换成了60年代末萌芽并在70年代风靡英美的朋克摇滚，后一本则是 LSD 的合成者艾伯特·霍夫曼（Albert Hofmann）亲自书写的 LSD 逸事。我向来着迷于那些不寻常的奇异人物与事件，这几本书充分地满足了我的好奇心。&lt;/p&gt;
&lt;p&gt;当然除了读书，这四十多天来自己还做了很多事，但大多数都希望自己没有做才好，就比如中期答辩这类事，只是会凭白增加青春之苦闷罢了。但有一件事却十分有价值，那便是开了这个博客。虽说大学四年多半过得浑浑噩噩，但偶尔还是会有提笔写点东西的冲动。可惜我这个人比较懒，对折腾网页这类东西更是讨厌，开博客几乎从未进入过我的日常计划中。我基本上每天食堂图书馆自习室，要是有些情绪实在憋不住了就在校内上扔个日志完事。后来注销校内，便转战豆瓣日记，还在上面写了生平第一个技术贴。这两样东西还挺符合我的要求，因为它们都够简单，不用涉及 HTML。用 HTML 标记写文章对我来说绝对不可忍受，那些 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 简直就像是散落在文字里的污渍，毫无美感可言。&lt;/p&gt;
&lt;p&gt;后来我遇到了 &lt;a href=&quot;http://wowubuntu.com/markdown/index.html&quot;&gt;Markdown&lt;/a&gt;、&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;、&lt;a href=&quot;http://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;、&lt;a href=&quot;http://johnmacfarlane.net/pandoc&quot;&gt;Pandoc&lt;/a&gt;，再后来就有了这个博客。一开始我只是把它当作一个笔记本，作用不过就是充当 Linux 下的 &lt;a href=&quot;http://www.evernote.com&quot;&gt;Evernote&lt;/a&gt;。利用 &lt;a href=&quot;http://jekyllbootstrap.com&quot;&gt;Jekyll-Bootstrap&lt;/a&gt; 和一个已有&lt;a href=&quot;http://themes.jekyllbootstrap.com/preview/the-minimum&quot;&gt;主题&lt;/a&gt;迅速搭建出一个博客原型。在熬过了中期答辩的那几天后我急需一个东西来发泄体内堆积过多的荷尔蒙，正好当时这个主题有许多我不满意的地方，因此我好好地荒废了那几天工作日，全心全意扑在了折腾博客上。经过某个彻夜奋战，我完成了一个里程碑式的改动，觉得这个博客终于算是一个可以拿出去给人看的东西了。没想到昨晚到 Windows 下浏览的时候却发现字体完全混乱，而且样式也出了问题。无奈只好再花时间折腾，要是让实验室老师知道花了这么多时间没好好干活，估计会被骂得很惨吧。&lt;/p&gt;
&lt;p&gt;在调整字体的过程中，这个系列&lt;a href=&quot;http://www.cnblogs.com/ruxpinsp1/archive/2008/04/29/font-in-front-end-development-1.html&quot;&gt;博文&lt;/a&gt;给了我很大帮助，在这里谢谢原作者。此外有个浏览器插件叫 &lt;a href=&quot;http://chengyinliu.com/whatfont.html&quot;&gt;WhatFont&lt;/a&gt;，可以实时查看当前页面中的文字所使用的字体，是个不错的小工具。现在这个博客基本上已经比较符合我对它的期望，我也不想再花时间在其外观的设置上，毕竟方便快捷地记录下自己的思考过程和最终想法才是它最重要的功能。在此列出所有在原主题基础上作出的改动：&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;将 Pandoc 设为 Jekyll 的 Markdown 渲染器。&lt;/li&gt;
&lt;li&gt;正文与标题的字体均优先选用 &lt;a href=&quot;http://www.google.com/webfonts&quot;&gt;Google Web Fonts&lt;/a&gt; 中的 &lt;a href=&quot;http://www.google.com/webfonts/specimen/Droid+Sans&quot;&gt;Droid Sans&lt;/a&gt;。中文方面 Linux 下首选&lt;a href=&quot;http://wenq.org/index.cgi?MicroHei&quot;&gt;文泉驿微米黑&lt;/a&gt;，Windows 下为微软雅黑，Mac 下则是冬青黑体。&lt;/li&gt;
&lt;li&gt;给每篇文章增加了发表时间。很多 Jekyll 的主题都默认不显示文章发表的具体时间，而是只到发布日期，这点感觉还是很奇怪的。&lt;/li&gt;
&lt;li&gt;增加代码高亮的方式。其实原本 Jekyll 即支持代码高亮，但借助 Pandoc 代码高亮可以用更&lt;a href=&quot;http://johnmacfarlane.net/pandoc/README.html&quot;&gt;简洁&lt;/a&gt;的 Markdown 语法实现。&lt;/li&gt;
&lt;li&gt;添加 &lt;a href=&quot;http://disqus.com&quot;&gt;Disqus&lt;/a&gt; 评论。&lt;/li&gt;
&lt;li&gt;添加 &lt;a href=&quot;http://feedburner.google.com&quot;&gt;FeedBurner&lt;/a&gt; 订阅。&lt;/li&gt;
&lt;li&gt;添加 &lt;a href=&quot;http://www.google.com/analytics&quot;&gt;GoogleAnalytics&lt;/a&gt; 页面分析。&lt;/li&gt;
&lt;li&gt;增加博客图标。待完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于写作的完整过程，我是这样进行的：&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;用 &lt;code&gt;rake post&lt;/code&gt; 新建一篇空白 Markdown 文件。&lt;/li&gt;
&lt;li&gt;用 &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; 加 Pandoc 扩展&lt;a href=&quot;http://johnmacfarlane.net/pandoc/README.html&quot;&gt;语法&lt;/a&gt;写文章。&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;jekyll --safe&lt;/code&gt; 在本地生成所有内容。&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;git push&lt;/code&gt; 将内容送至 Github 远端&lt;a href=&quot;http://yangzetian.github.com/YangBlog&quot;&gt;库&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置好这个写作系统后，我可以将自己的注意力全部放在文章的内容上，而不被其他因素打扰，简直就跟以前在校内、豆瓣上写日志一样。后来我又推荐了好友&lt;a href=&quot;http://marcieinred.github.com&quot;&gt;萝卜&lt;/a&gt;以这种方式开博，虽然他一开始不怎么乐意，不过后来还是经受不住零成本博客的诱惑，跳进了这个大坑。此外他是个前端高人，喜欢直接写 HTML ，没有采用 Jekyll + Markdown。我想总有一天他会后悔的 :P。&lt;/p&gt;
&lt;p&gt;读完《叛逆》后本来是想写一篇基调压抑的文章来总结最近低靡的境况，可写着写着心情却变好了起来，这大概就是博客或者说是写作的魅力吧。对我来说它还有一个吸引我的地方，因为我一直比较支持&lt;a href=&quot;http://zh.wikipedia.org/zh/%E5%AD%98%E5%9C%A8%E4%B8%BB%E4%B9%89&quot;&gt;存在主义&lt;/a&gt;的观点，可近来却常常无法真切地感受到自己的存在，只有看着这个博客的时候，才能确信自己还有颗自主独立的心灵。&lt;/p&gt;
&lt;p&gt;如果说民谣是歌手们对于社会不公的抗议，那这个博客或许就是我对青春成长的叛逆。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>为 Jekyll 装上瑞士军刀 Pandoc</title>
   <link href="http://yangzetian.github.com/2012/04/15/jekyll-pandoc"/>
   <updated>2012-04-15T01:12:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/04/15/jekyll-pandoc</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
  &lt;style type=&quot;text/css&quot;&gt;
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
  margin: 0; padding: 0; vertical-align: baseline; border: none; }
table.sourceCode { width: 100%; }
td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
td.sourceCode { padding-left: 5px; }
code &gt; span.kw { color: #007020; font-weight: bold; }
code &gt; span.dt { color: #902000; }
code &gt; span.dv { color: #40a070; }
code &gt; span.bn { color: #40a070; }
code &gt; span.fl { color: #40a070; }
code &gt; span.ch { color: #4070a0; }
code &gt; span.st { color: #4070a0; }
code &gt; span.co { color: #60a0b0; font-style: italic; }
code &gt; span.ot { color: #007020; }
code &gt; span.al { color: #ff0000; font-weight: bold; }
code &gt; span.fu { color: #06287e; }
code &gt; span.er { color: #ff0000; font-weight: bold; }
  &lt;/style&gt;
  &lt;script src=&quot;https://d3eoax9i5htok0.cloudfront.net/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Jekyll 原生支持 &lt;code&gt;maruku&lt;/code&gt;，&lt;code&gt;rdiscount&lt;/code&gt;，&lt;code&gt;kramdown&lt;/code&gt;，&lt;code&gt;redcarpet&lt;/code&gt; 等 markdwon 渲染器，它们各有利弊。个人认为 Maruku 虽然是 Jekyll 的默认选择，却是最不适合 中文博客的，因为它对中文列表的支持不好。Rdiscount 算是中归中举，但对于 &lt;a href=&quot;http://www.mathjax.org&quot;&gt;MathJax&lt;/a&gt; 的用户来说却比较头疼，容易出诡异的问题。Github 在后台则选用了 Redcarpet 作为其文本渲染器，因为它安全性高且性能卓越，同时它在基本 Markdown 语法的基础上增加了一些自己的特性。Kramdown 是这几个当中对基础 Markdown 语法拓展最多，也是最方便使用的，但跟这篇文章的主角 &lt;a href=&quot;http://johnmacfarlane.net/pandoc&quot;&gt;Pandoc&lt;/a&gt; 来比，它就相形见绌了。&lt;/p&gt;
&lt;p&gt;首先介绍一下 &lt;a href=&quot;http://johnmacfarlane.net/pandoc&quot;&gt;Pandoc&lt;/a&gt;，它的功能是在多种常见的标记语言进行相互转换，其中包括 Markdown, reStructuredText, Textilte, HTML, \(\LaTeX\) 等。利用它，你可以用简单的 Markdown 语法生成与 \(\LaTeX\) 一致的文档，还可以写 Beamer 演示文稿。更强大的是，它还能将以上提到的这些语言所写文件转换成 &lt;em&gt;docx&lt;/em&gt; 文档，这对我们这些体制内码农很是实用。下面这张图展示了 Pandoc 让人吃惊 的功能集，不愧为文件转换中的瑞士军刀：&lt;/p&gt;
&lt;img src=&quot;http://johnmacfarlane.net/pandoc/diagram.png&quot; alt=&quot;pandoc is awsome!&quot; width=&quot;650&quot;/&gt;
&lt;p&gt;对于用 Jekyll 写博客的人来说它还有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持在 Markdown 文档中直接使用 \(\LaTeX\) 公式，最终生成的网页更是可以选择以图片、MathJax、jsMath 等等方式显示公式&lt;/li&gt;
&lt;li&gt;支持代码高亮，并自带多种高亮方案可选。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然这两个功能都可以通过设置 Jekyll 实现，但由于我对 Pandoc 已经欲罢不能，其它的渲染器都再也看不上眼了。下面我就来介绍如何让 Jekyll 使用 Pandoc 作为 Markdown 渲染器。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先需要说明的是，由于 &lt;a href=&quot;http://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; 并不支持 Pandoc，所以就不能将包含 Markdown 日志等文件的 Jekyll 目录直接放到 Github 库上指望 Github 帮我们渲染它们，而是需要在本地将站点完全生成好后再将它送到某一库里。有人可能觉得麻烦，但对我 来说却是一个优点，因为这样做会使 Github Pages 更新速度大大加快，不会出现今晚提交，明早才被更新好的情况。&lt;/p&gt;
&lt;p&gt;先要安装 Pandoc，具体过程请参考：&lt;a href=&quot;/2012/03/31/pandoc-cabal&quot;&gt;安装 GHC，Cabal/Cabal-install 及 Pandoc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果本机上已安装了 Jekyll 则需将其删除，因为下面要使用修改过的 Jekyll。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sudo) gem uninstall jekyll&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果本机还未安装 Jekyll，大概你也没装 Ruby 了，那么请执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sudo) yum install ruby ruby-devel rubygems
(sudo) gem install liquid classifier directory_watcher maruku kramdown albino &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下载修改过的 Jekyll，它已被修改成 Pandoc 友好型 :)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:yangzetian/jekyll&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;a href=&quot;https://github.com/dsanson/jekyll&quot;&gt;这里&lt;/a&gt; 有 &lt;a href=&quot;http://www.davidsanson.com/&quot;&gt;dsanson&lt;/a&gt; 的版本，作者称可以解决 Github Pages 不支持 Pandoc 的问题，不过我试了一晚愣是没搞定，所以自己写了一个。其实原理很简单，即修改&lt;code&gt;lib/jekyll/converters/markdown.rb&lt;/code&gt; 文件，在 &lt;code&gt;setup&lt;/code&gt; 和 &lt;code&gt;convert&lt;/code&gt; 中按照其它渲染器的格式增加一个 &lt;code&gt;pandoc&lt;/code&gt; 判断即可。)&lt;/p&gt;
&lt;p&gt;安装 Pandoc-ruby，一个 Pandoc 的 Ruby 接口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sudo) gem install pandoc-ruby&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装 Jekyll：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem build jekyll.gemspec
(sudo) gem install -l jekyll-0.11.2.gem&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改 Jekyll 配置文件 &lt;code&gt;_config.yml&lt;/code&gt; 如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;markdown: pandoc
pandoc:
    extensions: [mathjax, standalone]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的 &lt;code&gt;extensions&lt;/code&gt; 并不唯一，可以将任何 Pandoc 支持的选项加入其中。&lt;/p&gt;
&lt;p&gt;好了，现在我们博客中所有的 Markdown 文件已经是由 Pandoc 渲染的了！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面是 Pandoc 演示环节&lt;/p&gt;
&lt;p&gt;从&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$e^x = \sum_{n=0}^\infty \frac{x^n}{n!} = \lim_{n\rightarrow\infty} (1+x/n)^n$&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到&lt;/p&gt;
&lt;p&gt;\(e^x = \sum_{n=0}^\infty \frac{x^n}{n!} = \lim_{n\rightarrow\infty} (1+x/n)^n\)&lt;/p&gt;
&lt;p&gt;从&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.python .numberLines}
class FSM(object):

&amp;quot;&amp;quot;&amp;quot;This is a Finite State Machine (FSM).
&amp;quot;&amp;quot;&amp;quot;

def __init__(self, initial_state, memory=None):

    &amp;quot;&amp;quot;&amp;quot;This creates the FSM. You set the initial state here. The &amp;quot;memory&amp;quot;
    attribute is any object that you want to pass along to the action
    functions. It is not used by the FSM. For parsing you would
    typically pass a list to be used as a stack. &amp;quot;&amp;quot;&amp;quot;

    # Map (input_symbol, current_state) --&amp;gt; (action, next_state).
    self.state_transitions = {}
    # Map (current_state) --&amp;gt; (action, next_state).
    self.state_transitions_any = {}
    self.default_transition = None
    ...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到&lt;/p&gt;
&lt;table class=&quot;sourceCode python numberLines&quot;&gt;&lt;tr class=&quot;sourceCode&quot;&gt;&lt;td class=&quot;lineNumbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;sourceCode&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FSM(&lt;span class=&quot;dt&quot;&gt;object&lt;/span&gt;):

&lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This is a Finite State Machine (FSM).&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;ot&quot;&gt;self&lt;/span&gt;, initial_state, memory=&lt;span class=&quot;ot&quot;&gt;None&lt;/span&gt;):

    &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This creates the FSM. You set the initial state here. The &amp;quot;memory&amp;quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    attribute is any object that you want to pass along to the action&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    functions. It is not used by the FSM. For parsing you would&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    typically pass a list to be used as a stack. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;co&quot;&gt;# Map (input_symbol, current_state) --&amp;gt; (action, next_state).&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;self&lt;/span&gt;.state_transitions = {}
    &lt;span class=&quot;co&quot;&gt;# Map (current_state) --&amp;gt; (action, next_state).&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;self&lt;/span&gt;.state_transitions_any = {}
    &lt;span class=&quot;ot&quot;&gt;self&lt;/span&gt;.default_transition = &lt;span class=&quot;ot&quot;&gt;None&lt;/span&gt;
    ...&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.davidsanson.com&quot;&gt;dsanson 的博客&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>安装 GHC, Cabal/Cabal-install 及 Pandoc</title>
   <link href="http://yangzetian.github.com/2012/03/31/pandoc-cabal"/>
   <updated>2012-03-31T00:00:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/03/31/pandoc-cabal</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;GHC 是 Glasgow Haskell Compiler 的简称，也是 Haskell Platform 的基础。 最新的版本可以从&lt;a href=&quot;http://www.haskell.org/ghc/&quot;&gt;这里&lt;/a&gt;下载。&lt;/p&gt;
&lt;p&gt;进入最新版本的下载页面后有两个选择，一是二进制包，二是纯源码包。 如果想从纯源码包下载，需要你本机上已装有某个版本的 ghc ，因为这个 源码的大部分就事用 Haskell 写的。&lt;/p&gt;
&lt;p&gt;由于种种缘故我把之前 yum 安装的 ghc 给删了，所以这里我选择 ghc 的 linux_x86 平台二进制包。&lt;/p&gt;
&lt;p&gt;下好安装包后即是通用的 make 过程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar xjvf ghc-7.x.x-i386-linux-unkown.tar.bz2
cd ghc-7.x.x
./configure
make install&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在可以开始安装 Cabal/Cabal-install了。&lt;/p&gt;
&lt;p&gt;Cabal 是 Haskell 的一个 package，提供了一个 Haskell 包安装框架，方便了 Haskell 包的管理。 而 Cabal-install 则是另一个 Haskell 包安装库，它提供了 &lt;code&gt;cabal&lt;/code&gt; 命令行 程序，该程序在安装新包时会自动解决包依赖关系，大大方便了 Haskell 包的安装。&lt;/p&gt;
&lt;p&gt;官方的建议是安装 Haskekll Platform，它整合了 GHC，Cabal，Cabal-install 等常用工具。 由于我觉得 fedora repo 中的 HP 版本过老，编译 HP 又需要其他很多东西，所以就没有选取这个方案，而是自己安装 Cabal。&lt;/p&gt;
&lt;p&gt;其实 Cabal 和 Cabal-install 只要安装后者就可以了，因为安装 Cabal-install 时用的 &lt;code&gt;bootstrap&lt;/code&gt; 程序会自动下载 Cabal-install 所依赖的包，其中当然包括 Cabal。但如果你只安装前者那么后者还需要手动安装。&lt;/p&gt;
&lt;p&gt;虽说可以从 &lt;a href=&quot;http://hackage.haskell.org/package/cabal-install&quot;&gt;hackage&lt;/a&gt; 中下载 Cabal-install，但版本实在太老了。 我选择从&lt;a href=&quot;http://darcs.haskell.org/cabal-branches/&quot;&gt;开发库&lt;/a&gt;中下载最新的稳定版本安装。 这里有一个需要注意的是一定要保证你所用的 Cabal 版本与 Cabal-install 版本一致， 也就是说从开发库中同一个版本文件夹中下载 Cabal 和 Cabal-install，否则安装时会出现麻烦。 所以最好的办法就是不安装 Cabal 而直接安装 Cabal-install，这样永远不会出现冲突问题。&lt;/p&gt;
&lt;p&gt;我选择的是 &lt;a href=&quot;http://darcs.haskell.org/cabal-branches/cabal-1.14/&quot;&gt;Cabal-1.14&lt;/a&gt; 版本，把这个链接里所有的文件都用 &lt;code&gt;wget&lt;/code&gt; 下载到本地。命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -r -np -p http://darc.haskell.org/cabal-branches/cabal-1.14/cabal-install&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入Cabal-install目录后执行&lt;code&gt;sh bootstrap.sh&lt;/code&gt;，即可完成安装。 如果在安装过程中出现问题，大多是因为系统缺少一些库，比如 &lt;code&gt;gmp-devel&lt;/code&gt;，&lt;code&gt;zlib-devel&lt;/code&gt; 等，需要自行用 &lt;code&gt;yum&lt;/code&gt; 搞定。&lt;/p&gt;
&lt;p&gt;安装完成Cabal-install 后，将cabal程序所在目录加入PATH中，再执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cabal update
cabal install pandoc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;好了，现在可以享受pandoc给我们带来的便利了！&lt;/p&gt;
&lt;p&gt;pandoc的使用请参考下面的&lt;em&gt;Links&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/demos.html&quot;&gt;Pandoc Demos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/README.html&quot;&gt;Pandoc User’s Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://chen.yanping.me/cn/blog/2012/03/13/pandoc/&quot;&gt;一份中文简介&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Markdown 中文列表抽风</title>
   <link href="http://yangzetian.github.com/2012/03/28/markdown"/>
   <updated>2012-03-28T16:53:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/03/28/markdown</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;用 markdown 写带中文的列表时发现 jekyll 生成的网页中有的可以正常显示，有的则不行。&lt;br /&gt;折腾半天，发现如果列表项中含有英文字母等非中文字符，就可以正确显示，纯中文的那些打死也不行。&lt;/p&gt;
&lt;p&gt;上网查后得知原来是 jeklly 默认 markdown 引擎 maruku 的问题，将引擎改为 rdiscount 即可。&lt;br /&gt;做法是修改 &lt;code&gt;_config.yml&lt;/code&gt; 文件，在 &lt;code&gt;pygments: true&lt;/code&gt; 上面添加一行 &lt;code&gt;markdown: rdiscount&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.douban.com/note/147668553/&quot;&gt;markdown 渲染引擎折腾记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.v2ex.com/t/28800&quot;&gt;中文清单 lists 问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Vim 拾遗</title>
   <link href="http://yangzetian.github.com/2012/03/27/vim"/>
   <updated>2012-03-27T13:04:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/03/27/vim</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h2 id=&quot;索引&quot;&gt;索引&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#vimim&quot;&gt;VimIm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#markdown&quot;&gt;markdown syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vimfold&quot;&gt;vim fold&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;vimim&quot;&gt;
VimIm
&lt;/h2&gt;

&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;下载 &lt;a href=&quot;http://vim.sourceforge.net/scripts/download_script.php?src_id=17150/&quot;&gt;vimim.vim&lt;/a&gt; 至 &lt;code&gt;/usr/share/vim73/plugin&lt;/code&gt; 或 &lt;code&gt;/home/.vim/plugin&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;下载 &lt;a href=&quot;http://vimim-data.googlecode.com/svn/trunk/data/vimim.pinyin.txt/&quot;&gt;vimim.pingyin.txt&lt;/a&gt;，&lt;a href=&quot;http://vimim.googlecode.com/svn/trunk/plugin/vimim.cjk.txt/&quot;&gt;vimim.cjk.txt&lt;/a&gt; 至相同目录&lt;/li&gt;
&lt;li&gt;两种工作模式：
&lt;ul&gt;
&lt;li&gt;在插入模式下输入拼音，按 CTRL-^ 直接将拼音转换为汉字。&lt;/li&gt;
&lt;li&gt;在任意模式下按 CTRL-_， 进入动态输入模式，此模式与普通输入法类似&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; vimim.cjk.txt 是一个数码字库，如果需要拼音输入或五笔输入法需配套相应的其他字库 &lt;a href=&quot;http://groups.google.com/forum/?fromgroups#!topic/vimim/zWdi6QqKdLk/&quot;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;links&quot;&gt;Links&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vim.sourceforge.net/scripts/script.php?script_id=2506&quot;&gt;sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vimim.googlecode.com/svn/vimim/vimim.big5.html#cloud&quot;&gt;google code page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/vimim/&quot;&gt;gogole groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/vimim-data/&quot;&gt;第三方词库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id='markdown'&gt;
markdown vim语法高亮
&lt;/h2&gt;

&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;下载 &lt;a href=&quot;http://plasticboy.com/dox/vim-markdown.zip&quot;&gt;mkd.vim.tar.gz&lt;/a&gt;，解压至 &lt;code&gt;.vim/&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;里面包含两个文件夹：&lt;code&gt;ftdetect&lt;/code&gt; 和 &lt;code&gt;syntax&lt;/code&gt;，第一个用于设置 vim 的文件关联，第二个是真正的 syntax 文件&lt;/li&gt;
&lt;li&gt;如需将某种文件后缀关联为 markdown 类型，需要在 &lt;code&gt;ftdetect/mkd.vim&lt;/code&gt; 中添加后缀&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;links-1&quot;&gt;Links&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://plasticboy.com/markdown-vim-mode/&quot;&gt;mkd blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/plasticboy/vim-markdown/&quot;&gt;mkd github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id='vimfold'&gt;
vim 折叠相关命令
&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;set foldenable/nofoldenable 
set foldmethod=syntax/indent...
set foldlevel=0/1/2...&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;links-2&quot;&gt;Links&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://man.chinaunix.net/newsoft/vi/doc/fold.html&quot;&gt;chinaunix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Linux 小窍门札记</title>
   <link href="http://yangzetian.github.com/2012/03/22/linux-tricks"/>
   <updated>2012-03-22T20:33:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/03/22/linux-tricks</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;这里用来记录Linux使用过程中得到的一些零碎却非常实用的小技巧。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;yum&quot;&gt;yum&lt;/h2&gt;
&lt;p&gt;查找哪个包提供了&lt;code&gt;makeinfo&lt;/code&gt;程序：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum provides *bin/makeinfo&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;rpm&quot;&gt;rpm&lt;/h2&gt;
&lt;p&gt;查找某个包的相关文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rpm -qs libgfortran&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;zip&quot;&gt;zip&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;unzip xxx.zip -d destdir&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;tar&quot;&gt;tar&lt;/h2&gt;
&lt;p&gt;将foo1，foo2打包至目标target&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar czf dir/to/target.tar.gz foo1 foo2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将target.tar.gz内容抽取至foo目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir foo; tar xzf target.tar.gz --directory=foo&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;z&quot;&gt;7z&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;7z e xxx.7z -o{DIR}&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;screenshot&quot;&gt;screenshot&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;scrot -s&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;gnome-快捷键&quot;&gt;Gnome 快捷键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Terminal缩放&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Crtl-_  || Crtl-+&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入系统剪切板的内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Shift-Ins&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;bash-快捷键&quot;&gt;Bash 快捷键&lt;/h2&gt;
&lt;h3 id=&quot;命令行编辑&quot;&gt;命令行编辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;移动至行首或行尾 &lt;code&gt;Crtl-a || Crtl-e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;按单词前移或后移 &lt;code&gt;Alt-f || Alt-b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除至行首或行尾 &lt;code&gt;Ctrl-u || Ctrl-k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;回删一个词 &lt;code&gt;Ctrl-w || Alt-Backspace || Esc-Backspace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后删一个词 &lt;code&gt;Alt-d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;粘贴至光标后 &lt;code&gt;Ctrl-y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;命令行历史&quot;&gt;命令行历史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;上一条命令 &lt;code&gt;!!&lt;/code&gt; | &lt;code&gt;!!:p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上条以xx开头的命令 &lt;code&gt;!xx&lt;/code&gt; || &lt;code&gt;!xx:p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数: &lt;code&gt;!*&lt;/code&gt; || &lt;code&gt;!$&lt;/code&gt; || &lt;code&gt;!*:p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;替换参数 &lt;code&gt;^foo^fooo&lt;/code&gt; || &lt;code&gt;^foo^fooo^&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;wget&quot;&gt;wget&lt;/h2&gt;
&lt;p&gt;从&lt;URL&gt;下载整个文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -c -r -np -k -L -p &amp;lt;URL&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定下载目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -P &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以30秒为间隔不断重新请求下载&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -t 0 -w 31 -c &amp;lt;URL&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 
</feed>