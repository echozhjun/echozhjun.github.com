<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Mind on Mind</title>
 <link href="http://yangzetian.github.com/atom.xml" rel="self"/>
 <link href="http://yangzetian.github.com"/>
 <updated>2012-12-01T11:21:34+08:00</updated>
 <id>http://yangzetian.github.com</id>
 <author>
   <name>Zetian Yang</name>
   <email>zetain.yang@gmail.com</email>
 </author>

 
 <entry>
   <title>说说话</title>
   <link href="http://yangzetian.github.com/2012/12/01/talk-talk-talk"/>
   <updated>2012-12-01T02:13:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/12/01/talk-talk-talk</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;我和小涵认识有两个月了。&lt;/p&gt;
&lt;p&gt;我还记得和她第一次说话时的情景。那晚我陪她走回宿舍，还没说上几句，她突然摇晃着上身，左一下、右一下往上提了提袖子，整套动作显得活泼又羞涩。那次她的口音朴实干净，没有女孩的娇嗔，也听不出亲疏远近，只是老老实实地传达主人的语义。当别人都忙着往自己的声音里惨入习语情绪还有个人标记时，她的声音显得平实原始，让我联想到北方的城镇。&lt;/p&gt;
&lt;p&gt;我告诉她，你的声音里有一种跳跃的东西。比如她在句尾使用的「噢」，就像一只被注视太久的灰喜鹊，在她使劲点头的暗号下突然蹬腿起飞。最近几天她看上去特别像个小孩子，想想其实那时她就露出了这些孩子的特征：乐呵呵的举动总藏不住内心的期待和紧张。但不知是因为我习惯了她的声线，还是她适应了和我对话，后来她声音里的粗糙渐渐消失了，跃动却一直留了下来。&lt;/p&gt;
&lt;p&gt;我们讲话最多的时候，是我们吵架的时候。初次吵架发生在一个月前的某个周一。之后一周的星期三，我们第二次吵架，几乎要就此终结。度过一个难得平安的礼拜后，我们在下个周一再次争吵。当前这周我们延续了优良传统，又痛快地闹了一次别扭，日子还是周一。让人欣慰的是，我们的每次不和，都没能跨过24小时这个难关，且越来越有下午吵架，晚上和好的趋势。&lt;/p&gt;
&lt;p&gt;我们讲话最少的时候，是我们无法说话的时候。《乱世佳人》里的一句台词曾让我惶恐了好久，它说：「你应该被吻，常常被吻，并且要被知道怎样接吻的人吻。」 这让我想起几年前观摩过的一段教育视频，以及它列出来的一条禁忌。我的脑袋大概已为这条规则训练出了一条反射弧，以至现在每当我闭上眼或动下舌，脑海里总会冒出一行醒目的大字：「不要撞击对方的舌头根部！」 比这更有趣的事情发生在我和小涵之间。我们在一颗星星的启发下发明了一个游戏，并为它起了一个充满情色味道的名字，我不能再透露更多。&lt;/p&gt;
&lt;p&gt;今天很冷，我希望天还能再冷些，这样才有北京冬天的特点，那就是当你在室外，会特别惦记室内的温暖，而一旦来到室内，就真的暖活了。就像我和小涵，一旦面对面看着对方，就真的不会吵架了。&lt;/p&gt;
&lt;p&gt;不论说不说话，和小涵在一起，我很开心。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>你怎样走出困境 1</title>
   <link href="http://yangzetian.github.com/2012/10/31/how-you-get-unstuck"/>
   <updated>2012-10-31T22:31:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/10/31/how-you-get-unstuck</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;亲爱的 Sugar，&lt;/p&gt;
&lt;p&gt;大约十八个月前，我怀孕了。让我和我男友都吃惊的是，我们决定留住这个孩子。尽管我们并未打算怀孕，我们仍为将要成为父母而激动不已。我们非常热爱并渴望得到这个孩子。但当我怀孕六个半月后，我流产了。自从那时起，我便努力想从自己的床里走出来。&lt;/p&gt;
&lt;p&gt;没有哪一天我不在想她会是怎样的一个孩子。她是个女孩。她有自己的名字。每一天醒来，我想着「我的女儿会有六个月大了」或「我女儿今天能开始爬了。」 而有些时候，我只能一遍又一遍地想着「女儿」这个词。&lt;/p&gt;
&lt;p&gt;当然还有，仿佛我周围的每个人都在拥有一个孩子，我去任何一个地方满眼见到的也是小孩，所以我必须强迫自己为他们感到高兴，并吞下自己的空虚。事实上，我无法再感受其他的事情，每件事都会伤害到我。我生活中的大多数人都期望我能从现在起摆脱自己的悲痛。其中一位向我指出，「那只不过是一次流产。」 因此我又开始为自己如此受困，为一个不该出生的孩子而伤痛却无法自拔感到内疚。&lt;/p&gt;
&lt;p&gt;我不再过多地谈论此事。我假装它从未发生过。我去工作，出去闲逛，面带微笑并表现得好像每件事都很正常。我的男友一向很好并在支持着我。但我认为他并不能理解我现在过得有多么糟糕。他想我们结婚并再要一个小孩。他认为这样做能让我高兴。但这没有。这让我想要揍他的脑门，为他无体会我的感受。&lt;/p&gt;
&lt;p&gt;后来我知道了流产的原因。在医院里，医生说我流产一点都没有让他吃惊，因为我的怀孕一直处于危险状态，因为我体重超标。听到流产是我的错真不是一件容易接受的事情。部分的我认为医生是一个混蛋，但另一部分的我认为或许他是正确的。得知这些是我自己的错，全因为我自己才带来流产快要杀了我自己。有时我甚至无法呼吸，我感到如此愧疚。离开医院后，我找了一名私人教练，并开始控制饮食和减肥，但现在的我完全失去控制了。有时，我好几天都不进食，而有时我吞下能见到的任何食物再把它们全吐出来。我在健身房待上数个小时，在跑步机上走到自己再也无法抬起双腿。&lt;/p&gt;
&lt;p&gt;我的朋友和家人认为我一切正常，Sugar，但没有什么能比这更加远离事实。所有我能考虑的只有我是如何把事情搞杂。每件事都好像超出了我能应付的范围。我理性的那部分知道，如果我不把自己从中拉出来，我将重重地伤害我自己。我知道这些，但我就是不在乎。&lt;/p&gt;
&lt;p&gt;我想知道怎样重新在乎起来。我想知道怎样才能不感到如此内疚，怎样才能不再觉得是我害死了自己的孩子。&lt;/p&gt;
&lt;p&gt;我的女儿，她有一个名字。她被人爱着。我感觉自己是唯一在乎她的人。而哀悼着「这只不过是一次流产」近一年时间让我觉得糟糕透顶。我被困住了。&lt;/p&gt;
&lt;p align=&quot;right&quot;&gt;
最好的祝愿，&lt;br/&gt; Stuck
&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;译自「Tiny Beautiful Things」19-20 页。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Arch Linux 折腾后记：双屏显示器</title>
   <link href="http://yangzetian.github.com/2012/09/30/arch-notes-again"/>
   <updated>2012-09-30T22:30:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/09/30/arch-notes-again</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
  &lt;style type=&quot;text/css&quot;&gt;
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
  margin: 0; padding: 0; vertical-align: baseline; border: none; }
table.sourceCode { width: 100%; }
td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
td.sourceCode { padding-left: 5px; }
code &gt; span.kw { color: #007020; font-weight: bold; }
code &gt; span.dt { color: #902000; }
code &gt; span.dv { color: #40a070; }
code &gt; span.bn { color: #40a070; }
code &gt; span.fl { color: #40a070; }
code &gt; span.ch { color: #4070a0; }
code &gt; span.st { color: #4070a0; }
code &gt; span.co { color: #60a0b0; font-style: italic; }
code &gt; span.ot { color: #007020; }
code &gt; span.al { color: #ff0000; font-weight: bold; }
code &gt; span.fu { color: #06287e; }
code &gt; span.er { color: #ff0000; font-weight: bold; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;几天前，实验室来了一批新显示器，这样，我的显示空间在原先的 593mm x 371mm 基础上又增加了 376mm x 301mm。按理说，这是一件好事，因为可以在新增的小号显示器上做一些隐秘的事情。只是 Linux 总会抓住一切可能的机会考验你一把，这种幸福的烦恼更是不容错过了。&lt;/p&gt;
&lt;p&gt;整个风波的始终如下：&lt;/p&gt;
&lt;p&gt;新机器的 ATI 显卡配置了两个输出端口，一个为 DisplayPort， 一个为 DVI。而现有的两台显示器，一个有 HDMI 输入口，另一个有 VGA 输入口。这样，利用一条 DisplayPort 转 HDMI 的转接线及一个 DVI 转 VGA 转接口，两台显示器便应该可以正常工作了。可实际情况是，接受 DisplayPort 输出的大屏显示器工作得很好，而 DVI 的那个却不停地闪屏。&lt;/p&gt;
&lt;p&gt;因为双屏在安装了 ATI 私有驱动 Catalyst 的 Windows 下可以正常工作，所以觉得在 Arch 下安好 Catalyst 驱动应该就能解决问题。根据官方的 &lt;a href=&quot;https://wiki.archlinux.org/index.php/ATI_Catalyst&quot;&gt;Wiki&lt;/a&gt; ，摸索出来的驱动过程安装如下。&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;添加非官方 Catalyst 源。将下面的几行添加至 &lt;code&gt;/etc/pacman.conf&lt;/code&gt; 里面位于 [core] 和 [extra] 之前。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;[catalyst]
Server = http://catalyst.apocalypsus.net/repo/catalyst/&lt;span class=&quot;ot&quot;&gt;$arch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;2&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;更新整个系统。这一步非常重要！不然后面编译驱动模块时会很麻烦。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;pacman -Syu&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;安装 catalyst 相关软件包。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;pacman -S catalyst-generator catalyst-util lib32-catalyst-utils&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;4&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;编译内核模块。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;catalyst_build_module&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;5&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;这个时候千万不能重启系统，还需生成初 Xorg 的配置文件。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;aticonfig --initial or aticonfig --initial=dual-head&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;修改内核启动参数。&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;/etc/default/grub
-----------------
&lt;span class=&quot;ot&quot;&gt;GRUB_CMDLINE_LINUX=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;quot;nomodeset&amp;quot;&lt;/span&gt;
grub-mkconfig -o /boot/grub/grub.cfg&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;7&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;重启吧，剩下的交给 amdcccle 来处理。最后需要注意的就是 amdcccle 生成的 Xorg.conf 文件放在 /etc/X11 里，最好将其重命名为 20-monitor.conf 后放置 /etc/X11/Xorg.conf.d/ 中。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置完后，双屏果然可以正常显示。就这样，我打开 xscreenvasor，痛痛快快地游泳去了。结果游了一小时回来后，就发现悲剧了。屏幕僵在了一个画面上，鼠标键盘全无反应，最后只好硬关机，重启，看着那台新 Optiplex 受此委屈，真让人心疼啊。&lt;/p&gt;
&lt;p&gt;上网查了查，发现是 Xorg 挂了，据传是 ATI Catalyst 固有的一个问题。试了一个解决方案，发现还是会死机。最后忍无可忍，下狠心删了 Catalyst 重新安装开源驱动，决定再难也要跨过 Xorg.conf 配置这一关。&lt;/p&gt;
&lt;p&gt;查了一些 Xorg 的设置资料，但不管是利用 Xorg.conf 还是 xrandr，都没法解决闪屏的问题。期间试了无数屏幕刷新率，均于事无补。实在没办法，另找一个显示器插上，发现还是会闪屏。之前一直觉得问题出在 Xorg 的配置，最后突然想到，会不会是两个接口出了问题。上网一搜，果然有人提到说 DisplayPort 接口加 DVI 转 VGA 接口会导致 VGA 显示器闪屏，而这个问题也没有什么好的解决方案。卸下转接头，直接用 DVI 接口接 DVI 显示器后，屏幕立刻就不闪了。之后只要在 .xinitrc 中加入以下命令就能顺利双屏啦：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;xrandr --output DVI-0 --auto --pos 0x0 --output DisplayPort-0 --auto --right-of DVI-0&lt;/code&gt;&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>原谅世界，原谅自己</title>
   <link href="http://yangzetian.github.com/2012/09/23/forgive-this-world"/>
   <updated>2012-09-23T23:20:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/09/23/forgive-this-world</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;9月9号，纽约时报焦虑专栏发表了一篇名为「On Being Nothins」的散文。文中，作者 &lt;a href=&quot;http://www.brianjaystanley.com/aphorisms/&quot;&gt;Brian Jay Stanley&lt;/a&gt; 夹叙夹议，讲述了自己从渴望得到关注，到无法得到关注而导致压抑与痛苦，再到接受现实，成为这个世界的关注者的艰难历程。文章极具启发性，下面为其最后两段，也是个人认为最精彩的部分。&lt;/p&gt;
&lt;div class=&quot;floating-right&quot;&gt;
&lt;img src=&quot;http://www.brianjaystanley.com/about/author-photo.jpg&quot;/&gt;
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;Society is adroid at disillusioning newcomers, and many self-assured children grow up to be bitter adults. But bitterness, instead of a form of disillusionment, is really the refusal to give up your childhood illusions of importance. Ignored instead of welcomed by the world, you fault the world as blind and evil in order not to fault yourself as naive. Bitterness is a child’s coddling narcissism within the context of an adult’s harsh life. Instead, I know that the world only tramples me as a street crowd does an earthworm - not out of malice or stupidity, but because no one sees it. Thus my pain is not to feel wrongly slighted, but to feel rightly slighted.&lt;/p&gt;
&lt;p&gt;There must be a Copernical revolution of the self. Instead of pointlessly cursing the sun to go around me, my chance of contentment is learning to orbit, being the world’s audience instead of demanding the world to be mine. If the world is a stage, then everyone’s an extra, acting minor roles in simutaneous scenes in which no one has the lead. With so much happening, society is poorly made to satisfy pride, but well made to stisfy intrest. If we will only let go of our vanity and join the swirl of activity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概是好久没读到过这么喜欢的散文了，读完之后思绪万千，并写了一篇读后感如下，顺便充当了四天的写作作业 :-)&lt;/p&gt;
&lt;h2 id=&quot;forgive-this-world&quot;&gt;Forgive This World&lt;/h2&gt;
&lt;p&gt;At times, I’m confused by this world, by how it could be so cruel and relentless, apathetically watching me suffering from those overwhelming, unbearable negative emotions. Why couldn’t it listen to me a little bit, and take my sorrow and regret and shame carefully. No matter how I beg or curse, the course has never changed - I have to swallow all my pain and digest it even more painfully. The only good thing is that in the end, I’ll definitely recover and accidentally become stronger. So I think, pain itself may be not so bad.&lt;/p&gt;
&lt;p&gt;The author began this article with his habit which may be shared by many other people: checking mailbox with excitement. This habit is carried from his camp years, but its meaning has changed significantly. Mails used to be placebos that assured the author that he was not forgotten by this world, but now those mails only add to his depression.&lt;/p&gt;
&lt;p&gt;The cause behind this transition is that the aims of these mails have changed. There are no warm greetings any more, nor lovely concerns. But only requests for money, attention, and taxes, etc. This makes the author feel that he is nothing but “a pawn of others’ projects”. Nevertheless, the author didn’t blame other people for their demands upon him, for himself is just like others, selfish, desirous, and avid, of whom made up this cruel world.&lt;/p&gt;
&lt;p&gt;The author further analyzed people’s craving for other people’s notice and recognition. This desire seems to be attached to ourselves since we were born and won’t ever be detached unless we are dead.&lt;/p&gt;
&lt;p&gt;The popularity of contemporary social websites or applications is a perfect demonstration. No matter it’s that we find something interesting, or that we attain success, or that we screwed up, rises in our mind or heart a strong tendency to disclose ourselves to other people, along with the wispy hope that we could be applauded, understood, or just responded by them. It seems that we are partial feedback systems eager for other people’s response to make ourselves intact.&lt;/p&gt;
&lt;p&gt;But rationally speaking, this kind of desire actually makes little difference. After all, we are what we see, what we think, what we do, all by the hand of our own minds. Unless our minds are born to be inadequate, and outside forces helping confirm their existence are just like daily necessities.&lt;/p&gt;
&lt;p&gt;When we were young, these necessities were easy to obtain. We get them from our parents, teachers and peers. That made us feel that we were the center of this world, in which every action of ours were noticed by other people.&lt;/p&gt;
&lt;p&gt;But the good old days soon passed away. When we went to college, we were soon disappointed by the grim reality - that we lost our audience. No matter how many friends we made, how many parties we went, we couldn’t run away from the fact that we actually became more and more introvert. Be cared about by others seemed a impossible dream, not to say be truly understood. I remember walking along the cold lonely campus road, hoping someone willing to listen to me. But there were nobody but the trees, to which I whispered so many my thoughts and emotions. What hurt me was not there seemed no one could understand me, but they didn’t bother to. What I thought and felt was just not worthy to make a fuss of. I felt totally ignored by the world. To avoid admitting that I was insignificant, I began to blame the outside world for its coldness and cruelty.&lt;/p&gt;
&lt;p&gt;Unable to seek attention from the outside of the world, we often in turn to seek from the opposite direction. It’s not rare to see many people going through things related to themselves over and over again. We childishly think that by doing this we could fill in the vacancy of attention. Nevertheless, no matter where the attention comes from, the desire for more attention could hardly be satisfied.&lt;/p&gt;
&lt;p&gt;This world gives no more attention upon us than upon a leaf or cat. That doesn’t mean the world is evil, it’s our naiveness to take for granted that we should be more important than a leaf or cat. To live peacefully, we have to accept the fact that actually, we are nothing more than an ordinary element of the universe, just like every other living or lifeless substance. And to accept the fact, We have to overcome the coddling narcissism rooted in our mind since we were children. There’s no such thing as good or bad, everything just happens, evolves, comes to an end, and then happens again.&lt;/p&gt;
&lt;p&gt;This world may be cruel for people who are hard-wired to seek for attention, but it’s what it ought to be. To survive with contentment, the best we can do may be forgiving this world, for its parsimony of attention, and then, forgive ourselves, for born to crave this untouchable thing.&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Arch Linux 折腾记</title>
   <link href="http://yangzetian.github.com/2012/09/21/arch-notes"/>
   <updated>2012-09-21T00:02:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/09/21/arch-notes</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
  &lt;style type=&quot;text/css&quot;&gt;
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
  margin: 0; padding: 0; vertical-align: baseline; border: none; }
table.sourceCode { width: 100%; }
td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
td.sourceCode { padding-left: 5px; }
code &gt; span.kw { color: #007020; font-weight: bold; }
code &gt; span.dt { color: #902000; }
code &gt; span.dv { color: #40a070; }
code &gt; span.bn { color: #40a070; }
code &gt; span.fl { color: #40a070; }
code &gt; span.ch { color: #4070a0; }
code &gt; span.st { color: #4070a0; }
code &gt; span.co { color: #60a0b0; font-style: italic; }
code &gt; span.ot { color: #007020; }
code &gt; span.al { color: #ff0000; font-weight: bold; }
code &gt; span.fu { color: #06287e; }
code &gt; span.er { color: #ff0000; font-weight: bold; }
  &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;还记得不久前看到一个博主说自己在某天「破天荒」地写了两篇日志，没想到这事这么快就临到了自己头上。&lt;/p&gt;
&lt;p&gt;时间宝贵，不容浪费，所以还是直接切入主题吧。&lt;/p&gt;
&lt;p&gt;趁着老板给大家升级机器的良机，本人终于尝了一口火到爆的 Arch 之滋味。其中真是有苦有甜有刺激，为了下次再尝时少走几步弯路，也为给那些怀揣 Arch 夙愿的 Linux 同仁做点心理准备，特将此次的折腾全过程记录如下。&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;p&gt;老老实实地按着 &lt;a href=&quot;https://wiki.archlinux.org/index.php/Beginners%27_Guide&quot;&gt;Beginner’s Guide&lt;/a&gt; 一步步配好基本系统&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装配置 Awesome 桌面管理器。直接利用 .xinitrc 脚本启动，此外设置自动登录&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;.bash_profile:
--------------
&lt;span class=&quot;ot&quot;&gt;vt=$(&lt;/span&gt;&lt;span class=&quot;kw&quot;&gt;fgconsole&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;2&amp;gt;&lt;/span&gt;/dev/null&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;((&lt;/span&gt; vt == 1 &lt;span class=&quot;kw&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; startx -- vt7 &lt;span class=&quot;kw&quot;&gt;&amp;amp;&amp;gt;&lt;/span&gt; ~/.xlog
&lt;span class=&quot;kw&quot;&gt;unset&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;vt&lt;/span&gt;

/etc/inittab:
-------------
id:5:initdefault
c1:2345:respawn:/sbin/agetty -a user -o &lt;span class=&quot;st&quot;&gt;&amp;quot;-- \u&amp;quot;&lt;/span&gt; -8 -s 38400 tty1 linux

.xinitrc
--------
&lt;span class=&quot;co&quot;&gt;# 关闭系统鸣叫&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;xset&lt;/span&gt; -b
&lt;span class=&quot;co&quot;&gt;# 运行 awesome&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;exec&lt;/span&gt; awesome&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;3&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;p&gt;安装 Firefox, 配置好账户同步，Vimpertor 与 Tab Utilities&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装字体：Dejavu, wqy_zenhei, wqy_microhei, bitstream vera. 之后利用文泉驿字体&lt;a href=&quot;http://wenq.org/cloud/fcdesigner.html&quot;&gt;设置工具&lt;/a&gt;配置 ~/.fonts.conf&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装 pkgfile (提供包文件查询)，yaourt (方便安装AUR 内的包)，net-tools (提供 ifconfig 等网络设置命令)，wget&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;pacman -S pkgfile, net-tools, &lt;span class=&quot;kw&quot;&gt;wget&lt;/span&gt;

/etc/pacman.conf
---------------
&lt;span class=&quot;co&quot;&gt;# 添加 yaourt 源&lt;/span&gt;
[archlinuxfr]
Server = http://repo.archlinux.fr/&lt;span class=&quot;ot&quot;&gt;$arch&lt;/span&gt;

pacman -S yaourt&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;其中 pkgfile 的常用方法为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pkgfile -r &amp;#39;.*ifconfig.*&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;6&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;安装小企鹅输入法 fcitx&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;yaourt -S fcitx-git

.xinitrc
--------
&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;XMODIFIERS=&lt;/span&gt;@&lt;span class=&quot;ot&quot;&gt;im=&lt;/span&gt;fcitx
&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;GTK_IM_MODULE=&lt;/span&gt;fcitx
&lt;span class=&quot;kw&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;QT_IM_MODULE=&lt;/span&gt;fcitx&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里遇到一个恶心的问题，即当 yaourt 调用 wget 从 googlecode 上下载 fcitx 的 table 文件时，由于众所周知的原因始终没法正常下载，导致编译失败。解决方案在编译失败的间隙想办法手工下好 table 文件，并放入 /tmp 里对应当前 yaourt 的目录中，然后重新编译即可。&lt;/p&gt;
&lt;p&gt;之后将 dbus 添加至系统 Daemons 中&lt;/p&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;/etc/rc.conf
&lt;span class=&quot;ot&quot;&gt;DAEMONS=(&lt;/span&gt;... dbus @network ...&lt;span class=&quot;ot&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;7&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;p&gt;安装配置 Urxvt, Vim, Vimperator&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加常用命令别名&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;.bashrc
-------
&lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;ls=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;ls --color=auto&amp;#39;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;grep=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;grep --color=auto&amp;#39;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;ll=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;ls -l&amp;#39;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;vi=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;vim&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;9&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;设置 ls 命令的输出颜色&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;.bashrc
-------
&lt;span class=&quot;kw&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;kw&quot;&gt;`dircolors`&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;10&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;安装 openssh 与自动添加 ssh key&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;pacman -S openssh keychain

.bashrc
-------
&lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;ssh=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;eval $(/usr/bin/keychain --eval --agents ssh -Q --quiet ~/.ssh/id_rsa) &amp;amp;&amp;amp; ssh&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;11&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;为用户添加关机、重启权限&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;visudo
------
user &lt;span class=&quot;kw&quot;&gt;hostname&lt;/span&gt; =NOPASSWD: /sbin/shutdown -h now,/sbin/halt,/sbin/poweroff,/sbin/reboot

.bashrc
------
&lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;poweroff=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;sudo poweroff&amp;#39;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;reboot=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;sudo reboot&amp;#39;&lt;/span&gt;
&lt;span class=&quot;kw&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;halt=&lt;/span&gt;&lt;span class=&quot;st&quot;&gt;&amp;#39;sudo halt&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;12&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;安装 ntfs-3g ，并设置 ntfs 设备的加载操作&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;pacman -S ntfs-3g

/etc/fstab
----------
&lt;span class=&quot;co&quot;&gt;# SATA 盘设置&lt;/span&gt;
/dev/sda2       /home/yang/ntfs     ntfs-3g     &lt;span class=&quot;ot&quot;&gt;guid=&lt;/span&gt;users,uid=xxx,umask=0022   0 0

&lt;span class=&quot;co&quot;&gt;# 移动硬盘设置&lt;/span&gt;
/dev/disk/by-id/ata-Hitachi_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx-part1  /media/Hitachi  ntfs-3g     noauto,&lt;span class=&quot;ot&quot;&gt;gid=&lt;/span&gt;users,uid=xxxx,umask=0022,   0 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置好后，接入移动硬盘时直接&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# mount /media/Hitachi&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;即可加载移动硬盘。此外，涉及用户信息时可通过 id 命令查看。&lt;/p&gt;
&lt;ol start=&quot;13&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;安装应用程序&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;sourceCode bash&quot;&gt;&lt;code class=&quot;sourceCode bash&quot;&gt;pacman -S xscreensaver&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;锁屏&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; scrot&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;截屏&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; pidgin&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;即时通讯&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; stardict&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;字典&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; nautilus&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;文件管理&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; flash libreoffice-writer&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;字处理&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; libreoffice-calc&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;表格&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt; gwenview&lt;span class=&quot;kw&quot;&gt;(&lt;/span&gt;图片浏览&lt;span class=&quot;kw&quot;&gt;)&lt;/span&gt;
yaourt -S dropbox dropbox-cli dropbox-nautilus&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&quot;14&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;修正双系统&lt;a href=&quot;http://yangzetian.github.com/Yang-Tech-Notes/linux/arch_time.html&quot;&gt;时间问题&lt;/a&gt;与&lt;a href=&quot;http://yangzetian.github.com/Yang-Tech-Notes/linux/arch_sending_sigterm.html&quot;&gt;关机慢问题&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;下面是待折腾项目，估计近期不会去碰&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;安装配置 AMD Catalyst 显卡驱动&lt;/li&gt;
&lt;li&gt;选一个好看的 Gtk 与 Awesome 主题&lt;/li&gt;
&lt;li&gt;zsh&lt;/li&gt;
&lt;li&gt;mpd&lt;/li&gt;
&lt;/ol&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>他们的蓝色时期</title>
   <link href="http://yangzetian.github.com/2012/09/20/blue-era"/>
   <updated>2012-09-20T21:20:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/09/20/blue-era</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;最近在读赛林格的《九故事》，其中最喜欢的一篇叫《德·杜米埃-史密斯的蓝色时期》。故事讲述了一名青年画家在纽约及蒙特利尔遇到的一些无足轻重的小事，或许只会对那些内心敏感的年轻人才有些微吸引力。而其题目中的「蓝色时期」指毕加索于20岁至24岁期间所处的创作阶段。&lt;/p&gt;
&lt;p&gt;下面为这篇故事中的一些精彩段落：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;事情往往都是过后很久才能看清，不过，幸福与快乐之间唯一的不同就在于幸福是实在的固体而快乐则是一种流体。第二天早上，当靈云先生把两个新学生的邮件放在我桌子上时，我的快乐已开始从它的容器里往外渗漏。&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;我多年来一直深信，当那只老鼠从着了火的旋转轮盘上掉下，一瘸一拐地往家走时，它必定又有了杀死猫的无懈可击的新招。在我一读再读首席嬷嬷的来信并对着它愣了好长时间之后，我突然摆脱开它，给余下那四位学生写起信来，我劝他们别指望当什么艺术家了。我在信中一个一个地对他们说，他们绝对不具备值得发展的才能，他们绝对是在浪费自己的宝贵时间，也是在浪费学校的时间。四封信我都是用法语写的。写完后我立即上街把它们寄了。所带来的满足感是短暂的，但是没有消失时却让人感到非常非常的受用。&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;也就正在此时，我有了那种体验。突然（我说这一点，我相信，是完全具备应有的自我意识的），太阳升起，以每秒九千三百万英里的速度朝我的鼻梁飞来。我什么都看不见，而且惊慌失措——我只得将手按在玻璃上以保持身体平衡。这样的情况只持续了几秒钟。等我视觉恢复，那女子已离开橱窗，只留下一地闪闪发光的精致、显得格外圣洁的瓷漆假花。&lt;/p&gt;
&lt;p&gt;我倒退着离开了橱窗，绕着这个街区走了两圈，直到我双膝不再发软。然后，不敢再冒险往商店橱窗看上一眼了，我上楼进入自己的房间，躺倒在床上。几分钟，也许是几个小时之后，我用法语，在我的日记里记下了下面这短短的几行字：「我要给艾尔玛修女顺自己命运的轨迹而行的自由。全世界的人都是修女。」&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>开学小记</title>
   <link href="http://yangzetian.github.com/2012/09/07/new-term-starts"/>
   <updated>2012-09-07T12:55:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/09/07/new-term-starts</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;这几天好忙，搬家，补作文，提取 ROI 信号还有开学的各项杂事，直到昨天为止总算忙得差不多了。仔细一想，这几天都没怎么有时间静下来读点书。而自己只要有一段时间不读书，内心就会躁动起来，没法冷静思考，从而迷失在这风风雨雨的凡尘之中。&lt;/p&gt;
&lt;div class=&quot;floating-left&quot;&gt;
&lt;img class=&quot;span2&quot; src=&quot;http://img3.douban.com/pview/event_poster/raw/public/b00215a61b5240c.jpg&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;其实也没忙到没有一点私人时间，比如1号去看了兵马司五周年汇演，前天中午还溜去沙滩看了企鹅图书封面展。这两个活动都挺不错，它们各自象征了两个能给我带来愉悦的爱好：阅读和音乐。其中阅读能让我安静，音乐则给我激情。但如果偏向一方就会导致心理的营养不良，要么让人过于严肃，要么让人趋于聒噪。所以就需要努力从中找到一个平衡。&lt;/p&gt;
&lt;p&gt;再回想一下过去的这个暑假，&lt;a href=&quot;http://yangzetian.github.com/2012/07/28/the-last-summer-holiday&quot;&gt;计划&lt;/a&gt;执行得还算完满。证据之一便是现在我用着 Awesome 面对灰色的 urxvt 码下这些絮絮叨叨的琐事。其实这一切全出于偶然。笔记本上的 Gnome 一直运行得不错，虽然偶尔需要重启一下，修改某些功能的配置也几乎是不可能的事，但毕竟满足了大多数桌面工作的需求。直到快开学的某天，我突然想换一个桌面背景，结果桌面连着顶部的面板就从此消失了。尝试了一些修复的措施，全都没能挽回 Gnome 对我的一丝怜悯，它照旧以一屏冷酷的蓝色将我拒绝在系统的大门之外。既然它对我如此不仁，我也只好出点忘恩负义的损招了。&lt;/p&gt;
&lt;p&gt;在网上翻了翻各种桌面管理器的介绍，最终选择了平铺式的 Awesome。首先是因为可以减少对鼠标的依赖；二是写作文每天都得一边放着浏览器，一边打开终端实在太麻烦；三是想到实验室那台24寸的大屏显示器，铺满了应用程序一定很拉风。于是就这样告别了 Gnome，投向 Awesome 的怀抱。&lt;/p&gt;
&lt;p&gt;想到这里，突然觉得来学校的这几天，效率反而没有在家高了。不仅没读什么书，连本职的工作也总是拖拉。就拿写作文来说吧，NYT上面的文章已经有点读腻了，再也不想每天水一篇技术摘要什么的，而观点类的文章又常常不感兴趣，艺术类的又太难，这样的后果便是迟迟找不到合适的文章，也总是没法开始敲下那第一个单词。不仅是作文，其他工作拖延的状况也比较严重。认真反思了一下，觉得应该是最近生活缺少计划与节制所致。&lt;/p&gt;
&lt;p&gt;原来的想法是趁着好年纪，过一种放纵的青春生活。现在我还是想尝试那样的生活，但已经知道那不会是生活的主线。我认为各种经历都是宝贵的，接触的世界越宽广，生命的内涵便越充实。如果安排得当，努力专攻一门学问同体验多彩的人生并不冲突。难点在于是否拥有足够强大的执行能力，在放纵与修行之间切换得游刃有余。&lt;/p&gt;
&lt;p&gt;在修成正果之前，还是老老实实得制定计划，写些列表，把想做的和该做的事情都记下来。再根据实际完成情况进行修改完善，这样从中对自己的实力有个把握，也算是不小的锻炼。所以现在我就不再唠叨，得制定新学期的计划去嘞。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Love To Be Moved</title>
   <link href="http://yangzetian.github.com/2012/08/23/love-to-be-moved"/>
   <updated>2012-08-23T10:34:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/08/23/love-to-be-moved</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;若不是昨天被同学提醒，我都不会注意到今天是七夕&lt;br/&gt; 不过对于爱情，我想我还是一无所知&lt;br/&gt; 或许大多数人也都跟我一样，无法用理智去解读爱情&lt;br/&gt; 还好，艺术家为我们打开了另一扇窗&lt;br/&gt; 又有什么能像一首动人的诗或歌那样，告诉我们爱情的含义呢?&lt;/p&gt;
&lt;p&gt;So, let’s be moved.&lt;/p&gt;
&lt;h2 id=&quot;left-atrium&quot;&gt;Left atrium :&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;My Plants Are Dead&lt;/strong&gt; by &lt;em&gt;Blonde Redhead&lt;/em&gt; &lt;img src=&quot;http://cdn.pitchfork.com/incoming/15191/8730711f.jpg&quot;&gt; &lt;embed src=&quot;http://www.xiami.com/widget/0_1769706878/singlePlayer.swf&quot; type=&quot;application/x-shockwave-flash&quot; width=&quot;257&quot; height=&quot;33&quot; wmode=&quot;transparent&quot;&gt;&lt;/embed&gt;&lt;/p&gt;
&lt;h2 id=&quot;right-atrium&quot;&gt;Right atrium :&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Sky Song&lt;/strong&gt; by &lt;em&gt;Robert Desnos&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The flower of the Alps told the seashell:“You’re shining”&lt;br /&gt;The seashell told the sea:“You echo”&lt;br /&gt;The sea told the boat:“You’re shuddering”&lt;br /&gt;The boat told the fire:“You’re glowing brightly”&lt;br /&gt;The fire told me:“I glow less brightly than her eyes”&lt;br /&gt;The boat told me: “I shudder less than your heart does when she appears”&lt;br /&gt;The sea told me:“I echo less than her name does in your love-making”&lt;br /&gt;The seashell told me:“I shine less brightly than the phosphorus of desire in your hollow dream”&lt;br /&gt;The flower of the Alps told me:“She’s beautiful”&lt;br /&gt;I said:“She’s beautiful, so beautiful, she moves me.”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>长大，或只是变老</title>
   <link href="http://yangzetian.github.com/2012/08/21/grow-old-or-up"/>
   <updated>2012-08-21T00:00:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/08/21/grow-old-or-up</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div class=&quot;floating-right&quot;&gt;
&lt;img class=&quot;span4&quot; src=&quot;http://mayaangelou.com/images/bio7.jpg&quot;/&gt;
&lt;/div&gt;

&lt;p&gt;玛雅·安格鲁 (&lt;a href=&quot;http://www.mayaangelou.com&quot;&gt;Maya Angelou&lt;/a&gt;)，美国黑人传记作家，诗人。她曾当过皮条客，舞女，也当过记者，演员，制作人。1970年的《我知道囚禁的鸟儿为何歌唱》让她一举成名，她在其中用独特的风格讲述了自己17岁之前的生活经历。&lt;/p&gt;
&lt;p&gt;2008年，安格鲁出版了《给女儿的信》，献给自己从未出生的女儿。关于长大，她说&lt;sup&gt;&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I am convinced that most people do not grow up. We find parking spaces and honor our credit cards. We marry and dare to have children and call that growing up. I think what we do is mostly grow old. We carry accumulation of years in our bodies and on our faces, but generally our real selves, the children inside, are still innocent and shy as magnolias.&lt;/p&gt;
&lt;p&gt;我确信大多数人并不会长大。我们寻找停车位，支付信用卡。我们结婚并敢于生育小孩，我们就称之为长大。我想我们做的最多的不过是变老。我们将年岁的痕迹累积在我们的身体里，积累在我们的面庞上，但通常来说，我们那真实的自我，那个内心里的孩子，依旧天真无邪，并像木兰花一般害羞。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;摘自《给女儿的信》中第一篇《家》。&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>如何找到你生活的目的并做你之所爱</title>
   <link href="http://yangzetian.github.com/2012/08/09/purpose-and-love"/>
   <updated>2012-08-09T23:05:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/08/09/purpose-and-love</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;译自：&lt;a href=&quot;http://www.brainpickings.org/index.php/2012/02/27/purpose-work-love/&quot;&gt;How to Find Your Purpose and Do What You Love&lt;/a&gt;&lt;br /&gt;作者：&lt;a href=&quot;http://www.brainpickings.org/index.php/author/mpopova/&quot;&gt;Maria Popova&lt;/a&gt;&lt;br /&gt;译者：&lt;a href=&quot;http://yangzetian.github.com&quot;&gt;Zetian Yang&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;为什么名声是激情的敌人，又或如何在设定界限与结交朋友之间掌控平衡。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;『找一些比你自己更加重要的事情，』哲学家丹·丹尼特 (Dan Dennett)&lt;sup&gt;&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 曾在讨论&lt;a href=&quot;http://www.brainpickings.org/index.php/2010/12/01/tedify-happiness/&quot;&gt;幸福的秘密&lt;/a&gt;时说，『并且将你的生活奉献给它。』 但我们到底要如何找到它？当然，不是靠运气。我自己对于&lt;a href=&quot;http://www.brainpickings.org/index.php/2011/08/01/networked-knowledge-combinatorial-creativity/#curiosity&quot;&gt;好奇与选择&lt;/a&gt;乃是达成愿望之引擎这一观点具有坚定不移的信念，但怎样精确地找到自己人生真正的召唤又像是一段复杂且高度个性化的发现之舞。尽管如此，有些因素——某些选择——可以让这个过程简单一些。这里搜集的，便是从七个对于如何实现你人生召唤这一艺术与科学进行了深入思考的思想家那里得到的洞见。&lt;/p&gt;
&lt;h2 id=&quot;保罗格雷厄姆论如何做你之所爱&quot;&gt;1. 保罗·格雷厄姆论如何做你之所爱&lt;/h2&gt;
&lt;p&gt;每隔几个月，我便会重新翻出 &lt;a href=&quot;http://ycombinator.com/&quot;&gt;Y-Combinator&lt;/a&gt; 公司创始人保罗·格雷厄姆 (Paul Graham)&lt;sup&gt;&lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; 那篇2006年的精彩文章，&lt;a href=&quot;http://www.paulgraham.com/love.html&quot;&gt;《如何做你之所爱》&lt;/a&gt;，并再次将它精读。整篇文章才华横溢，但我觉得特别重要且紧迫的段落是那些作者对社会认可度和『名声』的错误价值判断的沉思：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我认为，你不应该做的，是担心任何一个不处在你朋友圈内的人的看法。你不应该担心自己的名声。名声是那个与你不相关的世界的观点。&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;名声就像一个强有力的磁场，它甚至能够扭曲你关于自己享受何物的信念。它使你的工作不是为自己喜欢的事，而为那些你认为自己将会喜欢的事。&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;名声只不过是灵感沉淀而得到的化石。任何一件事，如果你能将它做得足够好，你就可以让它出名。大量我们现在认为声名在外的事物，起初都只不过是一段碰撞到心灵的爵士乐曲——其实几乎所有既定的艺术形式都行。所以去做你喜欢做的事吧，让名声自己照顾好自己。&lt;/p&gt;
&lt;p&gt;名声对于雄心壮志来说尤其的危险。如果你想让有抱负的人将他们的时间浪费在各种事务上，那么你只需以名声作诱饵即可。这就是让人们作演讲，撰写前言，为委员会服务，成为部门总管等等等等的秘诀。一条看上去很不错的规则，便是直接避免任何有名望的任务。如果它不是那么令人讨厌，他们就不用想法设法地把它变得出名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;更多格雷厄姆关于如何寻找意义及创造财富的观点可以在&lt;a href=&quot;https://www.amazon.com/dp/1449389554/ref=as_li_ss_til?tag=braipick-20&amp;amp;camp=0&amp;amp;creative=0&amp;amp;linkCode=as4&amp;amp;creativeASIN=1449389554&amp;amp;adid=1Z5NFS65EVYZWSYB4REF&amp;amp;&quot;&gt;《黑客与画家：计算机时代的大观点》&lt;/a&gt;&lt;sup&gt;&lt;a href=&quot;#fn3&quot; class=&quot;footnoteRef&quot; id=&quot;fnref3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;中找到。&lt;/p&gt;
&lt;h2 id=&quot;阿兰德波顿谈成功&quot;&gt;2. 阿兰·德波顿谈成功&lt;/h2&gt;
&lt;p&gt;阿兰·德波顿 (Alain de Botton)&lt;sup&gt;&lt;a href=&quot;#fn4&quot; class=&quot;footnoteRef&quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;，当代哲学家与&lt;a href=&quot;http://www.amazon.com/gp/redirect.html?ie=UTF8&amp;amp;location=http%3A%2F%2Fwww.amazon.com%2Fs%3Fie%3DUTF8%26sort%3Drelevancerank%26search-alias%3Dbooks%26ref_%3Dntt_athr_dp_sr_1%26field-author%3DAlain%2520De%2520Botton%23&amp;amp;tag=braipick-20&amp;amp;linkCode=ur2&amp;amp;camp=1789&amp;amp;creative=390957&quot;&gt;『自助文学流派』&lt;/a&gt; 创始人，是我们文化观点中存在的种种矛盾与错觉的一个敏锐观察者。&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;http://www.ted.com/talks/alain_de_botton_a_kinder_gentler_philosophy_of_success.html&quot;&gt;《工作的欢愉与伤痛》&lt;/a&gt;&lt;sup&gt;&lt;a href=&quot;#fn5&quot; class=&quot;footnoteRef&quot; id=&quot;fnref5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;中，他将他非凡的风趣与才智带到了现代工作场所以及关于『成功』的思维谬误中。&lt;/p&gt;
&lt;img src=&quot;http://www.brainpickings.org/wp-content/uploads/2011/06/pleasuresandsorrowsofwork.jpg&quot; height=&quot;300&quot;/&gt;
&lt;p&gt;他2009年精彩的 &lt;a href=&quot;http://www.ted.com/talks/alain_de_botton_a_kinder_gentler_philosophy_of_success.html&quot;&gt;TED 演讲&lt;/a&gt; 就提供了这样一个品尝他思想的机会：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于成功的一个趣事是我们认为自己明白它的含义。很多时候，我们对于成功地活着意味着什么这一问题的看法，并不属于我们自己。它们是我们从别人那儿吸取过来的。同时，我们也从周身的一切事物中汲取信息，从电视到广告，再到市场营销，等等。这些及其强大的影响力为我们定义了我们想要什么以及我们如何看待自己。我想争论的并不是我们应该放弃我们关于成功的想法，而是我们应该确定这些想法是我们自己的。我们应该专注于我们的想法，并且确信我们拥有它们。因为不去争取你想得到的东西已经足够糟了，但更加糟糕的是拥有一个你渴望得到什么的想法，却在旅途终点发现事实上它从来都不是你想要的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;休麦克劳德论边界设定&quot;&gt;3. 休·麦克劳德论边界设定&lt;/h2&gt;
&lt;p&gt;卡通画家&lt;a href=&quot;http://gapingvoid.com/ie/&quot;&gt;休·麦克劳德&lt;/a&gt; (Hugh MacLeod)&lt;sup&gt;&lt;a href=&quot;#fn6&quot; class=&quot;footnoteRef&quot; id=&quot;fnref6&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; 玩世不恭的涂鸦与他对创造力，文化及人生意义的执着沉思同样出名。在&lt;a href=&quot;https://www.amazon.com/dp/159184259X/ref=as_li_ss_til?tag=braipick-20&amp;amp;camp=0&amp;amp;creative=0&amp;amp;linkCode=as4&amp;amp;creativeASIN=159184259X&amp;amp;adid=09D4PYK2QK7EZFW10RDZ&amp;amp;&quot;&gt;《不鸟任何人：创造力的39个关键》&lt;/a&gt;&lt;sup&gt;&lt;a href=&quot;#fn7&quot; class=&quot;footnoteRef&quot; id=&quot;fnref7&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;一书中，他收集了自己关于创意生活的最精明的建议。其中特别能与我自己对于选择的重要性的信念产生共鸣的，是以下关于设定界线的灼见：&lt;/p&gt;
&lt;img src=&quot;http://www.brainpickings.org/wp-content/uploads/2012/02/ignoreeverybody.jpg&quot; height=&quot;300&quot;/&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;16&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;一个有创造力的人能专业地学到的最重要的事情是在何处画一条红线，从而将你愿意做的事情和你不愿做的事情隔开。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当他人开始为之付款，艺术的苦难便开始了。你越需要钱，他人对你做什么的要求便越多。你需要吞下更多的废话。也将得到更少的快乐。请牢记这点并相应地制定计划。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;后来，麦克劳德呼应了上文中格雷厄姆关于名声的观点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol start=&quot;28&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;获得认可的最佳途径即不需要认可。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这在艺术与商业中同样重要。还有爱。还有性。还有所有其他值得拥有的东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;刘易斯海德论工作与劳动&quot;&gt;4. 刘易斯·海德论工作与劳动&lt;/h2&gt;
&lt;p&gt;在去年的&lt;a href=&quot;http://www.brainpickings.org/index.php/2011/09/12/fear-creativity/&quot;&gt;五本关于恐惧和创造过程的永恒图书&lt;/a&gt;精选合集推出后，许多读者适宜地推荐了另外一本书：刘易斯·海德 (Lewis Hyde)&lt;sup&gt;&lt;a href=&quot;#fn8&quot; class=&quot;footnoteRef&quot; id=&quot;fnref8&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; 1979年的经典作品，&lt;a href=&quot;http://www.amazon.com/dp/0307279502/ref=as_li_ss_til?tag=braipick-20&amp;amp;camp=0&amp;amp;creative=0&amp;amp;linkCode=as4&amp;amp;creativeASIN=0307279502&amp;amp;adid=1D1AQPSFGFG96A84FVC7&quot;&gt;《礼物：当代世界中的创造力与艺术家》&lt;/a&gt;。对这本书大卫·福斯特·华莱士 (David Foster Wallace)&lt;sup&gt;&lt;a href=&quot;#fn9&quot; class=&quot;footnoteRef&quot; id=&quot;fnref9&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;有条著名的评论，『没有哪个参与任何一种艺术形式的人能在读过《礼物》后不发生一点变化。』&lt;/p&gt;
&lt;img src=&quot;http://img3.douban.com/lpic/s4243628.jpg&quot; height=&quot;300&quot;/&gt;
&lt;p&gt;下面这条摘录最初在一月份出现在&lt;a href=&quot;http://www.brainpickings.org/index.php/2012/01/24/lewis-hyde-the-gift-work-vs-labor/&quot;&gt;这里&lt;/a&gt;。其中，海德清晰地叙述了工作与创造性劳动的区别。对它的理解将带领我们向职业自我实现这一神圣的终极目标更近一些：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;工作是我们按小时计所做的事。它总要开始并且，如果可能的话，我们做它是为了金钱。在生产线上焊接汽车车身是工作；洗刷碗碟，计算税收，查看精神病房，采摘芦笋——这些都是工作。另一方面，劳动自己设定自己的脚步。我们也许会从中得到报酬，但它更加难以得到量化……写一首诗，照料一个孩子，研究一种新的算法，解决神经病症，任何形式的发明——这些属于劳动。&lt;/p&gt;
&lt;p&gt;工作是一项有预期的通过意志力来达成的活动。一种劳动可以有所预期，但只会到完成基础目标或者不做明显会阻碍此项劳动的事情这种程度。在此之外，劳动有它自己的计划表。&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;没有科技或者时间节约装置可以改变创造性劳动的节律。因此，当劳动的价值通过交换价值来体现时，每次工作技术的进步都将导致创造力自动贬值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;心理学家米哈里·契克森米哈赖 (Mihaly Csikszentmihalyi)&lt;sup&gt;&lt;a href=&quot;#fn10&quot; class=&quot;footnoteRef&quot; id=&quot;fnref10&quot;&gt;10&lt;/a&gt;&lt;/sup&gt; 给把劳动与工作区分开的特质制定了一个术语：&lt;a href=&quot;https://www.amazon.com/dp/0061339202/ref=as_li_ss_til?tag=braipick-20&amp;amp;camp=0&amp;amp;creative=0&amp;amp;linkCode=as4&amp;amp;creativeASIN=0061339202&amp;amp;adid=0TG3J0565NPMS6KPR6YW&amp;amp;&quot;&gt;心流 (flow)&lt;/a&gt;&lt;sup&gt;&lt;a href=&quot;#fn11&quot; class=&quot;footnoteRef&quot; id=&quot;fnref11&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;——一种高度集中并且清晰明快的感觉，在其中你忘记了自己，忘掉了时间的流逝，并且感觉自己像是某个更加广阔的物体的一部分。如果你曾经为了某个心爱的项目熬一整夜，或者甚至连续花20小时来书写一封情书，你便体验过心流，也知道什么叫创造性劳动。&lt;/p&gt;
&lt;h2 id=&quot;史蒂夫乔布斯谈不安于现状&quot;&gt;5. 史蒂夫·乔布斯谈不安于现状&lt;/h2&gt;
&lt;p&gt;他那现已成为传奇的&lt;a href=&quot;http://www.brainpickings.org/index.php/tag/documentary/&quot;&gt;2005年斯坦福大学毕业演说&lt;/a&gt;，整个看来绝对是一块珍宝，其中，史蒂夫·乔布斯举出了一个强有力的论据来说明在寻找你人生召唤的过程中不要安于现状——这个论据主要依赖于他对&lt;a href=&quot;http://www.brainpickings.org/index.php/2012/01/11/intuition-vs-rationality/&quot;&gt;直觉所具力量&lt;/a&gt;的坚持：&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://www.brainpickings.org/wp-content/uploads/2012/02/stevejobs.jpg&quot; /&gt;&lt;p class=&quot;caption&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;你们的工作将填满你们生活的很大一部分，所以获取真正满意的唯一途径是去做那些你相信它们很伟大的工作。而从事伟大工作的唯一途径是热爱你所从事的事业。如果你还没有找到它，请继续寻找。不要安于现状。由于它会牵动着你内心的每一处，当你找到它时，你会知道的。此外，就像所有伟大的关系一样，随着年华的滚动，它只会越变越好。所以定要不断寻找直到你找到了它。不要安于现状。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;罗伯特克鲁尔威奇谈友谊&quot;&gt;6. 罗伯特·克鲁尔威奇谈友谊&lt;/h2&gt;
&lt;p&gt;罗伯特·克鲁尔威奇 (&lt;a href=&quot;http://en.wikipedia.org/wiki/Robert_Krulwich&quot;&gt;Robert Krulwich&lt;/a&gt;)&lt;sup&gt;&lt;a href=&quot;#fn12&quot; class=&quot;footnoteRef&quot; id=&quot;fnref12&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;，WNYC电台超棒的 &lt;a href=&quot;http://www.radiolab.org/&quot;&gt;Radiolab&lt;/a&gt;&lt;sup&gt;&lt;a href=&quot;#fn13&quot; class=&quot;footnoteRef&quot; id=&quot;fnref13&quot;&gt;13&lt;/a&gt;&lt;/sup&gt; 节目的联合制作人，向来具有启蒙性质的 &lt;a href=&quot;http://www.npr.org/blogs/krulwich/&quot;&gt;Krulwich Wonders&lt;/a&gt;博客作者，皮博迪优异广播奖 (&lt;a href=&quot;http://www.nypublicradio.org/press/radiolab-peabody/&quot;&gt;Peabody Award for broadcast excellence&lt;/a&gt;&lt;sup&gt;&lt;a href=&quot;#fn14&quot; class=&quot;footnoteRef&quot; id=&quot;fnref14&quot;&gt;14&lt;/a&gt;&lt;/sup&gt;) 获得者，同时也是当今最优秀的在职记者之一。在另一个&lt;a href=&quot;http://www.brainpickings.org/index.php/2011/06/10/best-commencement-graduation-speeches/#krulwich&quot;&gt;出色的毕业演说&lt;/a&gt;中，他清晰地阐述了热爱你的事业在社交方面的效用——即一种远比名声或同行评价等观念更有意义且真实的社会连通性。&lt;/p&gt;
&lt;div class=&quot;figure&quot;&gt;
&lt;img src=&quot;http://www.brainpickings.org/wp-content/uploads/2011/06/krulwich.jpg&quot; /&gt;&lt;p class=&quot;caption&quot;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;你将建造一个工作的主体，但你也将建造一个感情的主体，与那些你帮助过且他们又反过来帮助过你的人。这是一个&lt;em&gt;低地里有朋友&lt;/em&gt;&lt;sup&gt;&lt;a href=&quot;#fn15&quot; class=&quot;footnoteRef&quot; id=&quot;fnref15&quot;&gt;15&lt;/a&gt;&lt;/sup&gt;的时代。你现今遇到的那些人，他们会注意你，挑战你，与你一起工作，并且注视着你的后背。或许他们会成为你今后的力量。&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;如果你能……坠入爱河，与你的工作，与一起工作的人，与你的梦想还有他们的梦想。不论是什么带你来到这所学校，不要让它溜走。相信你的朋友。相信那些你和你的朋友必须说出来的……以及你说出它的方式——是这个世界从未拥有过的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;霍尔斯蒂宣言&quot;&gt;7. 霍尔斯蒂宣言&lt;/h2&gt;
&lt;p&gt;或许你还记得霍尔斯蒂宣言 (&lt;a href=&quot;http://shop.holstee.com/&quot;&gt;The Holstee Manifesto&lt;/a&gt;)，它作为我们&lt;a href=&quot;http://www.brainpickings.org/index.php/2011/04/08/five-manifestos-for-life/&quot;&gt;关于创意生活最受喜爱的五个宣言&lt;/a&gt;之一，是一封向有目标的生活发出的雄辩而美丽的情书。(这封宣言在这里是如此地被热爱，以至于它已经在 &lt;em&gt;Brain Pickings&lt;/em&gt; 的侧边栏上获得了一块永久的场地，这是一个对我自己以及你们，亲爱的读者，的每日提醒，提醒我们什么才是最重要的东西。)&lt;/p&gt;
&lt;img src=&quot;http://cdn.shopify.com/s/files/1/0031/5352/files/The-Holstee-Manifesto.jpg?1285103640&quot; width=&quot;400&quot;/&gt;
&lt;blockquote&gt;
&lt;p&gt;这是你的生活。做你之所爱，并要经常地去做。如果你不喜欢某些事情，改变它。如果你不喜欢你的工作，请退出。如果你没有足够的时间，不要继续观看电视。如果你在寻找生命中的真爱，请停下；他们会在你开始做你之所爱时为你而等待。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;霍尔斯蒂宣言现在已经作为一个漂亮的&lt;a href=&quot;http://shop.holstee.com/collections/all#.UCOvjqKiK1E&quot;&gt;印刷品&lt;/a&gt;出售，一张印制在由50%的大象便便与50%的回收纸手工制作纸张上的5×7&lt;a href=&quot;http://shop.holstee.com/products/holstee-greeting-card#.UCOvsaKiK1E&quot;&gt;贺卡&lt;/a&gt;，甚至一个婴儿围兜&lt;sup&gt;&lt;a href=&quot;#fn16&quot; class=&quot;footnoteRef&quot; id=&quot;fnref16&quot;&gt;16&lt;/a&gt;&lt;/sup&gt;——因为向他人倾注在激情之中生活所具有的价值，永远不会太早。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;译后记&quot;&gt;译后记&lt;/h2&gt;
&lt;p&gt;这篇文章标题很大，读完后或许会令人感到些许失望，因为它并没有直接告诉我们如何去寻找自己的人生目标。正如作者所说，寻找人生的目标是一段高度个性化的发现之旅，它很崎岖，充满挫败与困惑，却也充满惊喜与收获。想通过读一篇文章就找到自己的终极目标，实在是天方夜谭。其实这篇文章真正的价值，在于散落其文字中的众多链接、书籍与人物介绍，这些丰富的资料，使我们在探索与发现的旅途中不再孤单，也向我们提供了一个随时随地可以获得的心灵避难所。&lt;/p&gt;
&lt;p&gt;最后，引用屈原的那句箴言与大家共勉：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;路漫漫其修远兮，吾将上下而求索&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;丹尼尔·丹尼特 (1942- )，美国哲学家，作家，认知科学家。坚定的无神论者，与理查德·道金斯，山姆·哈里斯及克里斯托弗·希钦斯共称『新无神论的四骑士』。著有《头脑风暴：关于心智与心理的哲学论文》，并与道格拉斯·霍夫施塔特合著《心我论》。&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;保罗·格雷厄姆 (1964- )，美国著名程序员，创业家，风险投资家，博客及技术作家。&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;本书&lt;a href=&quot;http://book.douban.com/subject/6021440/&quot;&gt;中译版&lt;/a&gt;已由人民邮电出版社出版。&lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn4&quot;&gt;&lt;p&gt;阿兰·德波顿 (1969- )，瑞士作家，哲学家，电视制作人。现居伦敦，著有《关于爱情》、《旅行的艺术》、《快乐的构建》等。&lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn5&quot;&gt;&lt;p&gt;本书&lt;a href=&quot;http://book.douban.com/subject/4191531/&quot;&gt;中译版&lt;/a&gt;已由上海译文出版社出版。&lt;a href=&quot;#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn6&quot;&gt;&lt;p&gt;休·麦克劳德，美国卡通画家，作家，企业家，市场营销人。他基于在商业名片的背部制作卡通画创建了自己的生意，同时利用自己的博客 &lt;a href=&quot;www.gapingvoid.com/ie&quot;&gt;gapingvoid&lt;/a&gt; 摆脱了画廊、报纸等传统的艺术生存模式。&lt;a href=&quot;#fnref6&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn7&quot;&gt;&lt;p&gt;本书&lt;a href=&quot;http://book.douban.com/subject/4817987/&quot;&gt;繁体中译版&lt;/a&gt;已由木马文化事业公司出版。&lt;a href=&quot;#fnref7&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn8&quot;&gt;&lt;p&gt;刘易斯·海德 (1945- )，美国作家，诗人，评论家。著有《礼物》及《骗子制造了这个世界》。&lt;a href=&quot;#fnref8&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn9&quot;&gt;&lt;p&gt;大卫·福斯特·华莱士 (1962-2008)，美国作家，现代派小说的杰出代表。著有长篇小说《系统的笤帚》，《无尽的玩笑》，短篇小说集《头发奇特的女孩》等。于2008年12月12号在家中上吊自杀。&lt;a href=&quot;#fnref9&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn10&quot;&gt;&lt;p&gt;米哈里·契克森米哈赖 (1934- )，匈牙利裔美国心理学家，著名积极心理学研究者。著有畅销书《心流》，《创造力》，《寻找心流》等。&lt;a href=&quot;#fnref10&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn11&quot;&gt;&lt;p&gt;本书&lt;a href=&quot;http://book.douban.com/subject/6509801/&quot;&gt;中译版&lt;/a&gt;已由中信出版社出版。&lt;a href=&quot;#fnref11&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn12&quot;&gt;&lt;p&gt;罗伯特·克鲁尔威奇，美国著名电台与电视记者，擅长对复杂的主题用清晰，令人信服且有趣的方式进行解释。&lt;a href=&quot;#fnref12&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn13&quot;&gt;&lt;p&gt;美国一档公众电台节目，致力于推广传播科学与哲学思想，以其独特的制作风格与其话题易于被公众理解吸收而著名。&lt;a href=&quot;#fnref13&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn14&quot;&gt;&lt;p&gt;皮博迪奖，全称乔治·福斯特·皮博迪奖 (The George Foster Peabody Awards)，用以表彰广播，电视台，网络等媒体的优秀公众节目。&lt;a href=&quot;#fnref14&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn15&quot;&gt;&lt;p&gt;美国乡村乐歌手加思·布鲁克斯 (Garth Brooks) 的一首歌名 (Friends in Low Places)。这首歌收录在他1990年出版的专辑《No Fences》中，也是一首美国90年代乡村乐金曲，曾蝉联美国乡村单曲排行版首四周。&lt;a href=&quot;#fnref15&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn16&quot;&gt;&lt;p&gt;霍尔斯蒂已不再销售这类婴儿围兜。&lt;a href=&quot;#fnref16&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>最后一个暑假计划</title>
   <link href="http://yangzetian.github.com/2012/07/28/the-last-summer-holiday"/>
   <updated>2012-07-28T23:00:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/07/28/the-last-summer-holiday</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;因为家里发生了一些事情，我回家的日期突然从8月1号提前到7月29号，也就是明天。这会是自己最后一个真正意义上的暑假，或许应该过得难忘一些。记得从大二开始，我每年的暑假都会独自出远门旅行，前年是南京和上海，去年是海南。那种感觉非常棒。我喜欢步行在陌生城市的街道，那看到，听到和闻到的新鲜生活气息，总会将我淹没在无尽的满足中。古人云『读万卷书，行万里路』，实在是有道理。&lt;/p&gt;
&lt;p&gt;今年暑假可能没法出去远游了，因为要学车。但这无法阻碍我探索世界的脚步，咱不还有互联网么。不过在实验室待了一年后，时间对我显得越来越珍贵。面对这即将到来的大把自由时间，怎能不好好畅想一下？那么，下面就列举一下8月暑期计划，希望自己这最后一个暑假能过得开心一些 :-)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;阅读&quot;&gt;阅读&lt;/h3&gt;
&lt;h4 id=&quot;文学类&quot;&gt;文学类&lt;/h4&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;色彩缤纷的鸟&lt;/li&gt;
&lt;li&gt;白雪公主&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;实用类&quot;&gt;实用类&lt;/h4&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;敏感的人&lt;/li&gt;
&lt;li&gt;内向者优势&lt;/li&gt;
&lt;li&gt;盔甲骑士&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;学术类&quot;&gt;学术类&lt;/h4&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;Object Recognition Network Paper Mining&lt;/li&gt;
&lt;li&gt;Josh’s Mind Theory&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;在线资料&quot;&gt;在线资料&lt;/h4&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;New York Times&lt;/li&gt;
&lt;li&gt;Brain Pickings&lt;/li&gt;
&lt;li&gt;Paul Graham&lt;/li&gt;
&lt;li&gt;Larry Wasserman&lt;/li&gt;
&lt;li&gt;Bayesian Resources&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;技术&quot;&gt;技术&lt;/h3&gt;
&lt;h4 id=&quot;科学计算&quot;&gt;科学计算&lt;/h4&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;iPython (Notebook)&lt;/li&gt;
&lt;li&gt;matplotlib&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;折腾&quot;&gt;折腾&lt;/h4&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;vim&lt;/li&gt;
&lt;li&gt;vimperator&lt;/li&gt;
&lt;li&gt;zsh&lt;/li&gt;
&lt;li&gt;urxvt，如果有余力的话&lt;/li&gt;
&lt;/ol&gt;
&lt;hr /&gt;
&lt;p&gt;最后，还有一条及其重要，那就是向柳比歇夫同志学习！&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>加拿大之梦</title>
   <link href="http://yangzetian.github.com/2012/07/24/canada-dream"/>
   <updated>2012-07-24T22:13:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/07/24/canada-dream</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;偶然发现一个朋友在加拿大求学时写下的一些文字，读了后觉得有什么东西在胸腔里温暖地颤动，久久无法平静。仿佛自己正追随着作者的脚步，将那些美妙的经历逐一上演。&lt;/p&gt;
&lt;p&gt;多伦多初冬的夜晚，走在没有雨滴的街道上感受着这个城市的美丽。在魁北克向老天祈祷，期待着自己人生中的第一次天空滑行。当身体终于在12000英尺的云层穿过，才知道飞的感觉竟这样难忘。从惠斯勒耀眼的雪山一路滑向伊丽莎白公园，研究每条长椅上那些语句的故事。望着白石镇上一条或许从未有火车开过的铁轨，静静地躺在海边，等着人们在梦里把它唤醒。而脚踝上磨出的水泡，又见证了白色、灰色与彩色马路上踏过的每一小步。还有圣诞节飘起的雪，驾着驯鹿的老人悄悄走进那个终于实现了的梦里……&lt;/p&gt;
&lt;p&gt;或许是因为这些文字给我的共鸣过于强烈，最近总在凌晨4点的时候睁眼，然后脑袋发热一整天。我太想把自己的感动表达出来：那些冲击着我心脏的情绪，像温哥华汹涌的海浪，一波一波地，将我推向漩涡的中心。斑斓绚丽的幻想，不断从我的血脉里喷薄出来，争夺着每一条早已过载的神经中枢。而它们的每一次成功占领，都会引发我难以解释的怪异举动。然后，我只能像蒙特利尔赌场上最无可救药的赌徒，一边懊恼，一边妄想用下次的赌注挽回所有过错。直至自己终于身无分文，才突然发觉温哥华海水刺骨的温度。&lt;/p&gt;
&lt;p&gt;我已不记得这是第几次把事情搞砸，只记得自己好像从未成功过。一个人难过的时候，就回学校走走。路旁杨树那若无其事的老样子，总让我觉得，明天或许并不会有想象的那么糟。但明天又是那么远，远得好像多伦多的日出。&lt;/p&gt;
&lt;p&gt;至于那些难以消除的误解，只愿时间能将它们减轻一些。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>宇宙终极配色方案</title>
   <link href="http://yangzetian.github.com/2012/07/14/the-ultimate-colorscheme"/>
   <updated>2012-07-14T11:34:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/07/14/the-ultimate-colorscheme</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;img src=&quot;http://ethanschoonover.com/solarized/img/solarized-yinyang.png&quot; alt=&quot;Solarized&quot;/&gt;
&lt;p&gt;如果你是一个习惯用文本编辑器写东西（代码，文章）的人，你是否跟我一样为一套满意的配色方案(colorscheme)苦苦追寻了很久？就在昨天，我终于找到了令我折服的配色方案：&lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;Solarized&lt;/a&gt;。我称它为你需要的最后一个配色方案。&lt;/p&gt;
&lt;p&gt;这套配色由 &lt;a href=&quot;ethanschoonover.com&quot;&gt;Ethan Schoonover&lt;/a&gt; 精心挑选的十六种颜色组成，前八种为单色(monotones)，后八种为强调色(accent colors)。作者按照一定的亮度关系设计出来的这些颜色，使得文本不仅清晰易读，并且具有优异的对比度，就算长时间阅读眼睛也不觉得难受。&lt;/p&gt;
&lt;p&gt;作者最初将它设计为 Vim 的插件，但很快便被移植到了几乎任何可以设置调色板的地方，包括文本编辑器(Emacs, TextMate, Visual Studio)，终端模拟器，Mutt，以及 Photoshop, GIMP 等。我将它应用在了 Gnome-terminal 及 Vim 中，效果非常不错。配置方法可以参考我的笔记：&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;a href=&quot;http://yangzetian.github.com/Yang-Tech-Notes/linux/gnome_terminal_solarized.html&quot;&gt;Solarized Gnome-terminal&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://yangzetian.github.com/Yang-Tech-Notes/vim/vim_solarized.html#vim-solarized&quot;&gt;Solarized Vim&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;也可以参考&lt;a href=&quot;http://ethanschoonover.com/solarized&quot;&gt;官网&lt;/a&gt;的介绍后自己折腾。&lt;/p&gt;
&lt;p&gt;如果你也和设计者 Schoonover 一样喜欢在阳光明媚的日子坐在树荫下读书，那就赶快来尝试一下这套配色方案吧！&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>我的技术笔记上线啦!</title>
   <link href="http://yangzetian.github.com/2012/07/05/notes-online"/>
   <updated>2012-07-05T23:35:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/07/05/notes-online</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;经过几天的酝酿，我采用 &lt;a href=&quot;http://sphinx.pocoo.org&quot;&gt;Sphinx&lt;/a&gt; 搭建的 Wiki 式技术&lt;a href=&quot;http://yangzetian.github.com/Yang-Tech-Notes&quot;&gt;笔记&lt;/a&gt;终于上线了 :-)&lt;/p&gt;
&lt;p&gt;很久之前就看到&lt;a href=&quot;http://wiki.ktmud.com/index.html&quot;&gt;迟丘&lt;/a&gt;用&lt;a href=&quot;http://code.google.com/p/vimwiki&quot;&gt;Vimwiki&lt;/a&gt;编写的页面十分漂亮，当时就开始琢磨着想自己哪天也建一个类似的 Wiki 平台。后来又从 &lt;a href=&quot;http://beiyuu.com&quot;&gt;BeiYuu&lt;/a&gt; 的一篇&lt;a href=&quot;http://beiyuu.com/why-blog&quot;&gt;文章&lt;/a&gt;中体会到 Wiki 与博客的差别。按那篇文章的观点，我写博客的初衷（记录自己在使用 linux 过程中遇到的问题和收获）或许采用 Wiki 的形式更加适合。&lt;/p&gt;
&lt;p&gt;当然，现在这个博客早不是一个技术笔记了，而且正与技术渐行渐远。但归根结底来说我还是要靠技术混饭吃的，而技术又需要点点滴滴的持久积累。因此该技术笔记便顺利成章地出现了。它将记录与 linux, python, scientific computing, vim 等技术相关的内容，主要涉及各种工具、技术的配置与使用方法。这些往往属于比较零散的知识点，而那些对相关技术的总结性文章则将继续发表在博客中。&lt;/p&gt;
&lt;p&gt;Wiki 其实有很多方便快捷的搭建方法，比如新兴的 &lt;a href=&quot;http://www.tryscribble.com&quot;&gt;Scribble&lt;/a&gt;，将建 Wiki 变得和用记事本一样简单直接，而且相当美观。但在衡量了易用性与自由性之后，我最终选择了 Sphinx 作为自己的 Wiki 引擎，这里要十分感谢 &lt;a href=&quot;http://deep.tw&quot;&gt;Daniel Lin&lt;/a&gt; 的启发！&lt;/p&gt;
&lt;p&gt;这个笔记完全开源，依然是托管在 Github 上，源文件与编译好的网页均在 &lt;a href=&quot;https://github.com/yangzetian/Yang-Tech-Notes&quot;&gt;Yang-Tech-Notes&lt;/a&gt;。我的第一篇笔记与 &lt;a href=&quot;http://www.gnu.org/software/screen&quot;&gt;GNU Screen&lt;/a&gt; 有关，可以在&lt;a href=&quot;http://yangzetian.github.com/Yang-Tech-Notes/linux/screen.html&quot;&gt;这儿&lt;/a&gt;查看。&lt;/p&gt;
&lt;p&gt;最后，祝此笔记开门大吉，成果多多！&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>毕业的颜色</title>
   <link href="http://yangzetian.github.com/2012/06/10/graduate-colors"/>
   <updated>2012-06-10T09:45:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/06/10/graduate-colors</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;6号是我毕业答辩的日子，现在回想起来，仍觉得那一天是如此漫长。&lt;/p&gt;
&lt;p&gt;起因要追溯到去年的这个时候，我决定不以计算机继续作为自己毕业后的职业。这并不是一个莽撞作出的决定，因为从大二起我就尝试在计算机学院内寻找自己感兴趣的方向，但各实验室所作的工作与氛围均不能唤起我的任何激情。我不甘心把自己的青春年华花在沉闷的工程项目上，因此我开始寻求计算机以外的道路。&lt;/p&gt;
&lt;p&gt;一个偶然的机会，我突然意识到人类视觉的不寻常之处，并和子沛进行了讨论。后来他推荐我去读索尔索的那本&lt;a href=&quot;http://book.douban.com/subject/3171969/&quot;&gt;《认知心理学》&lt;/a&gt;，那是我第一次了解到原来心理学的研究对象是人类的心智。或许是冥冥之中的安排，在我急切的想找到一个人生出口的时候，『认知』这个既酷又神秘的词语打开了我的视野。后来我报名参加了北师大的认知神经科学暑期学校，并幸运地加入了 Liu Lab。从那时起，来自身边家人、朋友、同学的无休止疑问便开始了。&lt;/p&gt;
&lt;p&gt;我想我们每个人都有自己的思维空间，空间内是我们已了解接受的东西，而空间外则是从未被我们意识到的东西。对于那些从未接触过的事物，有些人的反应是质疑，如果无法质疑就会心生恐惧。还有一些人，他们对这个世界充满了好奇，渴望去接触自己从未考虑过的观念，希望经历那些之前未经历过的人生体验，这些使他们感到兴奋和满足。前一种人的心智是闭塞的，坚决地活在自己习惯的那个思维体系中；后一种人的心智是开放的，他们时刻准备着抛弃已有的思维体系，然后再将其重建。大多数工科生（尤其是工科女）属于前一种人，我却属于后一种。&lt;/p&gt;
&lt;p&gt;而我毕设答辩失败的根本原因，即在于这两种思维方式的冲突。或许对大多数计算机学院的老师或同学来说，研究大脑是件很&lt;a href=&quot;http://sealhuang.sinaapp.com/?p=191&quot;&gt;可笑&lt;/a&gt;的事情。当然失败并不是指没能通过（不然我就没心情写这篇文章了），而是说诸位老师将我的论文嘲讽了一番，并指出需要进行内容与格式上的较大修改才能符合计算机学院的要求。这时离论文终稿提交的截至时间还剩不到两天。万幸的是，另一位论文不符合『要求』的同学在回答提问时惹毛了诸位大佬，从而替我进了二辩，要不然估计我就真难顺利毕业了。&lt;/p&gt;
&lt;p&gt;答辩后的下午，我怀着失落与不安坐在实验室的座位上，虽然与实验室老师讨论了大致的修改方案，但还是无法安心地修改论文，就仿佛被人狠狠的揍了一拳，自己不仅没力气还手，还在时刻担心对方的下一记重击。除了对于不能毕业的恐惧，还有一个原因让我没法全心修改论文。那就是我始终认为本科论文没什么意义，根本不会有人真正在乎它的内容，花费如此之多的时间实在是有所不值。&lt;/p&gt;
&lt;p&gt;但生活总要继续，问题总要解决。吃过晚饭后，我像老板所说的那样『别管有没有意义』下决心跟论文死磕到底。有些事情就是这样，如果你决心达到目标，那你真的就会达到。我想这就是人类心智的强大之处，它不仅能让我们去追求那些美好的东西，也能让我们在枯燥无趣的工作中坚持下来。&lt;/p&gt;
&lt;p&gt;8号上午9点33分，我将打印好的论文终稿交给了学院的教务老师。我想，这是我对成为一名合格工科生的最后努力。此时校园里已到处飘起了象征着工科的金色绶带，四处可见庆祝毕业的兴奋面孔。我为自己没有放弃感到心满意足。&lt;/p&gt;
&lt;p&gt;9号，穿上学士服穿梭在校园里，大家情绪都很高涨。新主，音乐厅，绿园，图书馆，老教学区，怎么都拍不完的北航，到处载满了四年的记忆。雨过天晴的傍晚，清爽的风吹动着金黄绶带，仿佛置身在那片悬崖上的麦田。但误入麦田的孩子们都要离开了，因为他们已抬头看到了天空原来是那么广，那么蓝。&lt;/p&gt;
&lt;p&gt;忘了在哪儿看到过这么一句话，它说：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;上天真的会眷顾那些勇敢选择自己的生活并坚持努力地走下去的孩子们。&lt;/code&gt;&lt;/pre&gt;
&lt;a href=&quot;http://www.flickr.com/photos/80118139@N06/7170890781/&quot; title=&quot;The Graduate by yangzetian, on Flickr&quot;&gt;&lt;img src=&quot;http://farm9.staticflickr.com/8149/7170890781_8d845e1d03.jpg&quot; width=&quot;375&quot; height=&quot;500&quot; alt=&quot;The Graduate&quot;&gt;&lt;/a&gt;
&lt;p&gt;无论将来怎样，我都会不停地去寻找下一个出口。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>用 Glossary 学习 Python : 名字空间及作用域</title>
   <link href="http://yangzetian.github.com/2012/05/13/glossary-python-1-namespace-scope"/>
   <updated>2012-05-13T15:32:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/05/13/glossary-python-1-namespace-scope</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;在《如何阅读一本书》中作者提到，分析型阅读的第一步应该是弄清楚书中每个术语或专业词汇的语义，如果作者提供了一个词汇表 (glossary)，那么就应该先好好将它读一读。我认为这条规则不仅对阅读理解书籍来说很有效，对读代码、文档等技术方面的材料来说也十分适用。因此我想到了最近自己一直在使用的 &lt;a href=&quot;http://www.python.org&quot;&gt;Python&lt;/a&gt; 语言，它的&lt;a href=&quot;http://docs.python.org&quot;&gt;官方文档&lt;/a&gt;中就有一个这样的&lt;a href=&quot;http://docs.python.org/glossary.html&quot;&gt;词汇表&lt;/a&gt;。在浏览了里面的条目后，我发现这个词汇表及其有用，对许多概念进行了精短的说明，且覆盖了 Python 语言的方方面面。因此我将其作为自己深入学习 Python 的一个入口，并打算写一系列的文章，每次从中挑选出与某一主题相关的词汇，对它们进行学习研究。&lt;/p&gt;
&lt;p&gt;最近对 Python 的名字空间与作用域机制很感兴趣，读了一些相关的文章，这里对其作一个小结。&lt;/p&gt;
&lt;p&gt;言归正传，在 Glossary 中与名字空间或作用域相关的词汇有:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;namespace&lt;/em&gt; : The place where a variable is stored. Namespces are implemented as dictionaries. There are local, global and built-in namespaces as well as nested namespaces in objectes (in methods). Namespaces support modularity by preventing naming conflicts…&lt;/p&gt;
&lt;p&gt;&lt;em&gt;nested scope&lt;/em&gt; : The ability to refer to a variable in encolsing definition. For instances, a function defined inside another function can refer to variables in the outer fucntion. Note that nested scopes work only for reference and not for assignment which will always write to the innermost scope. In contrast, local varibles both read and write in the innermost scope. Likewise. global variables read and write to the global namespace.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;为了理解 Python 的名字空间机制，首先需要明确的是 Python 中的变量 (variable) 与其他语言的不同。在 Python 中并不存在一般意义上的变量，它只有&lt;em&gt;名字&lt;/em&gt; (names) 和&lt;em&gt;对象&lt;/em&gt; (objects)。对象是数据实体，而名字是访问对象途径。名字通过&lt;em&gt;绑定&lt;/em&gt; (binding) 操作&lt;sup&gt;&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;被引入至程序中。此外绑定除了会使某个名字指代某个对象，还会给这个名字赋予一些额外的性质。下面这段话来自 &lt;a href=&quot;http://docs.python.org/reference/executionmodel.html#naming-and-binding&quot;&gt;Python 语言参考&lt;/a&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当我们在某个代码快内绑定一个名字时，它就是成为该代码块的局部变量 (local variable)。 而当我们在模块级别上绑定一个名字是，它就是一个全局变量 (global variable)。 由于模块也是一个代码快，因此这些变量即是全局的也是局部的。 如果在一个代码块中使用了一个未在该代码快内定义（绑定）的名字，它就被称为自由变量 (free variale)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在程序一旦写成之后，任何代码块中的任意变量都必定属于上述三种类型&lt;sup&gt;&lt;a href=&quot;#fn2&quot; class=&quot;footnoteRef&quot; id=&quot;fnref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;之一，这是在生成字节码之前就确定下来的。因为这与虚拟机使用用哪种语句加载变量相关。比如下面这段代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



&lt;p&gt;函数 &lt;code&gt;f&lt;/code&gt; 的字节码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2           0 LOAD_CONST               1 (2)
            3 STORE_FAST               0 (l)

3           6 LOAD_GLOBAL              0 (g)
            9 STORE_FAST               1 (ll)
           12 LOAD_CONST               0 (None)
           15 RETURN_VALUE        &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看出对于局部变量 &lt;code&gt;f&lt;/code&gt;，Python 使用的是 &lt;code&gt;LOAD_FAST/STORE_FAST&lt;/code&gt; 一类指令，而对于全局变量则使用 &lt;code&gt;LOAD_GLOBAL/STORE_GLOBAL&lt;/code&gt; 一类指令。&lt;/p&gt;
&lt;p&gt;绑定的作用之一就是确定变量的类型：不论一个变量在当前代码块中的哪里被绑定，它都被认为是局部的，因此该代码块内所有对其的使用都将指向它绑定的这个对象。这段话听起来十分坳口，我们用下面这个例子来说明：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



&lt;p&gt;函数 &lt;code&gt;f&lt;/code&gt; 对应的字节码为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2           0 LOAD_FAST                0 (x)
            3 STORE_FAST               1 (t)

3           6 LOAD_CONST               1 (10)
            9 STORE_FAST               0 (x)
           12 LOAD_CONST               0 (None)
           15 RETURN_VALUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到，第一句加载变量 &lt;code&gt;x&lt;/code&gt; 时即使用的 &lt;code&gt;LOAD_FAST&lt;/code&gt; 指令，说明 Python 认为它是一个局部变量，而对 &lt;code&gt;x&lt;/code&gt; 的绑定却是在后面一条语句中才发生。这个例子说明了 Python 的变量类型机制 —— 变量类型被静态确定。虽然定义 &lt;code&gt;f&lt;/code&gt; 时不会报错，但在 &lt;code&gt;f&lt;/code&gt; 运行时会报出 &lt;code&gt;UnboundLocalError&lt;/code&gt; 的异常, 这个异常会在引用一个未绑定的局部变量时抛出。这似乎是个有点违反直觉的现象，按一般的理解，第一条语句中的 &lt;code&gt;x&lt;/code&gt; 应该是全局的，第二条语句不过是在本地重新生成了一个局部变量而已。但就像上文所说的，当定义好 &lt;code&gt;f&lt;/code&gt; 后，它里面的每个变量类型都已经确定了，尽管 &lt;code&gt;x&lt;/code&gt; 在第二条语句中才被绑定，但还是被认为是一个局部变量，既然是一个局部变量, 再运行时任何对这个名字的使用就会访问局部代码块中它所绑定的对象, 如果它还没被绑定，当然就应该报错。&lt;/p&gt;
&lt;p&gt;每个被引入的名字都被保存在某个名字空间里。而名字空间是和&lt;em&gt;代码块&lt;/em&gt; (block) 相互关联的。所谓代码块即指一段被当作一个单元执行的程序文本。诸如模块、函数体、类定义都是一个代码块。每个代码块都有一个属于自己的独立名字空间，且每个名字空间都有一个允许直接访问其内名字的的代码范围，在这个范围内这些名字都是可见的， 而在这个范围外，该名字空间的内的名字不能直接使用。这个代码范围即是该名字空间（中变量）的&lt;em&gt;作用域&lt;/em&gt; (scope)。&lt;/p&gt;
&lt;p&gt;现在让我们把注意力集中在代码块的局部变量&lt;sup&gt;&lt;a href=&quot;#fn3&quot; class=&quot;footnoteRef&quot; id=&quot;fnref3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;上, &lt;a href=&quot;http://docs.python.org/reference/executionmodel.html#naming-and-binding&quot;&gt;语言参考&lt;/a&gt;中说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在一个代码块中定义的局部变量的作用域为这个代码块本身。如果它定义在一个函数代码块中， 它的作用域将延伸至该代码块包含的所有内部代码块中，除非在子代码块里对其重新定义。 类代码块中定义的名字的作用域仅限于该代码块本身，它不会向类中的方法代码块扩展 —— 这包括生成器表达式，因为它们使用了函数作用域来实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了这几条规则，我们可以静态地推出在任意一个代码块被哪些名字空间的作用域所覆盖&lt;sup&gt;&lt;a href=&quot;#fn4&quot; class=&quot;footnoteRef&quot; id=&quot;fnref4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;，有如下几种情况：&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;代码块自身的局部名字空间，该空间包含了在本代码块中绑定的所有名字&lt;/li&gt;
&lt;li&gt;所有包含该代码块的函数代码块的名字空间，它们的作用域按代码块的分布层层嵌套&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;除了这两种可能的作用域之外，Python 还规定了以下两个所有代码块均可见的名字空间:&lt;/p&gt;
&lt;ol start=&quot;3&quot; style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;代码块所在模块的全局名字空间，它包含了模块中的所有全局变量&lt;/li&gt;
&lt;li&gt;内建名字空间，它其实是 &lt;code&gt;__builtin__&lt;/code&gt; 模块的名字空间&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以把上面的这两个名字空间合称『全局名字空间』，它们的作用域为模块内任何代码块。&lt;/p&gt;
&lt;p&gt;当 Python 需要对一个变量解析其对应的对象时它会以上面列出的 1， 2， 3， 4 顺序 (即 &lt;code&gt;LEGB&lt;/code&gt;) 依次尝试，把在最里层名字空间内找到的名字绑定作为当前名字的引用。有一个例外是如果在代码块中用 &lt;code&gt;global&lt;/code&gt; 语句对一个变量进行了声明，那么在该代码块中所有对此名字进行解析时将跳过 1, 2 直接从 3 开始。比如下面这段代码：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



&lt;p&gt;将会输出 10。函数 &lt;code&gt;f&lt;/code&gt; 的字节码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2           0 LOAD_CONST               1 (10)
            3 STORE_GLOBAL             0 (x)
...         ...&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从中可以看到，&lt;code&gt;x&lt;/code&gt; 在赋值时即被当作是全局变量。这说明了两点：&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;&lt;code&gt;global&lt;/code&gt; 语句可以覆盖一个名字在当前代码块中的其他绑定而将其强制设定为全局变量&lt;/li&gt;
&lt;li&gt;再次表明一个变量的类型是在运行前就被静态地确定&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;事实上，定义上面这个函数时 Python 编译器&lt;sup&gt;&lt;a href=&quot;#fn5&quot; class=&quot;footnoteRef&quot; id=&quot;fnref5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;会给出一个&lt;em&gt;语法警告&lt;/em&gt;，提醒你 &lt;code&gt;x&lt;/code&gt; 在全局声明前就被赋值。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;现在我们明白了 Python 中的名字、绑定、类型、代码块、名字空间、作用域等概念，再回顾一下最上面列出的那两个 Glossary 中的定义。如果你觉得已经完全理解了定义中说的每句话，每个词的含义，那就说明你理解 Python 的名字空间以及作用域了。&lt;/p&gt;
&lt;p&gt;对于那些想弄懂 CPython 是如何实现这些机制的人，请继续阅读：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2011/05/15/understanding-unboundlocalerror-in-python/&quot;&gt;Understanding UnboundLocalError in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2010/09/18/python-internals-symbol-tables-part-1/&quot;&gt;Python internals: Symbol tables, part 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eli.thegreenplace.net/2010/09/20/python-internals-symbol-tables-part-2/&quot;&gt;Python internals: Symbol tables, part 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;常见的绑定操作包括函数定义，类定义，赋值语句等，一个特别的绑定操作是 &lt;code&gt;del&lt;/code&gt; 语句，出现在 &lt;code&gt;del&lt;/code&gt; 后面的变量讲被认为是局部变量。关于绑定操作更多的说明请参考: &lt;a href=&quot;http://docs.python.org/reference/executionmodel.html#naming-and-binding&quot;&gt;Naming and binding&lt;/a&gt;&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn2&quot;&gt;&lt;p&gt;这里所指的类型并不是变量值的类型 (&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; 等)，而是指它是局部、自由还是全局变量。下同。&lt;a href=&quot;#fnref2&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn3&quot;&gt;&lt;p&gt;任何一个变量都必定是某个代码块的局部变量。&lt;a href=&quot;#fnref3&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn4&quot;&gt;&lt;p&gt;注意这里只是说确定被哪些名字空间覆盖，而没有说确定所有可以直接使用的变量，因为名字空间拥有的变量是动态地确定的。这也就是为什么 &lt;a href=&quot;http://docs.python.org/tutorial/classes.html#python-scopes-and-namespaces&quot;&gt;Tutorial&lt;/a&gt; 中说&lt;em&gt;作用域被静态地确定，动态地使用&lt;/em&gt;。&lt;a href=&quot;#fnref4&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&quot;fn5&quot;&gt;&lt;p&gt;虽说 Python 不是一个编译语言，但还是有一个编译器前端的，它对源文件进行语法分析，生成句法树和符号表，并最终产生字节码供虚拟机执行。这些步骤属于 Python 的静态地带，变量的类型就是在其中确定的。深入的信息请参考&lt;a href=&quot;http://eli.thegreenplace.net&quot;&gt;Eli&lt;/a&gt; 的文章 &lt;a href=&quot;http://eli.thegreenplace.net/2009/11/28/python-internals-working-with-python-asts/&quot;&gt;Python internals: Working with Python ASTs&lt;/a&gt;&lt;a href=&quot;#fnref5&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>BUAA Story : slides using pandoc and dzslides</title>
   <link href="http://yangzetian.github.com/2012/05/10/buaa-story"/>
   <updated>2012-05-10T22:11:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/05/10/buaa-story</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;今天下午学校搞德育答辩，要求每个人做三分钟左右的展示。之前在&lt;a href=&quot;http://yihui.name/en/2012/04/fancy-html5-slides-with-knitr-and-pandoc/&quot;&gt;益辉&lt;/a&gt;的博客上看到过非常炫的 html5 &lt;a href=&quot;http://inundata.org/R_talks/meetup/&quot;&gt;幻灯片&lt;/a&gt;，所以趁这个机会自己也尝试了一把。实际证明效果还是不错的，打算以后就放弃 bearmer 转投 html5+css+js 的门下了。&lt;/p&gt;
&lt;p&gt;我的这个展示用 &lt;a href=&quot;http://markdown.tw/&quot;&gt;markdown&lt;/a&gt; 编写，之后借助 &lt;a href=&quot;http://johnmacfarlane.net/pandoc/&quot;&gt;pandoc&lt;/a&gt; 转换成 &lt;a href=&quot;http://paulrouget.com/dzslides/&quot;&gt;dzslides&lt;/a&gt;。源文件可以从&lt;a href=&quot;http://github.com/yangzetian/BUAA-Story&quot;&gt;这里&lt;/a&gt;获取，也可以&lt;a href=&quot;http://yangzetian.github.com/BUAA-Story&quot;&gt;在线&lt;/a&gt;观看最终效果&lt;sup&gt;&lt;a href=&quot;#fn1&quot; class=&quot;footnoteRef&quot; id=&quot;fnref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;这里顺便介绍一下目前我知道的 html 幻灯片制作方法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一种就是我使用的 &lt;a href=&quot;http://paulrouget.com/dzslides/&quot;&gt;dzslides&lt;/a&gt;，它其实是一个 html 模板，利用 CSS3 实现了每张展示间的切换，它支持在幻灯片中直接使用 html5 元素。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第二种比较方便的方法是使用 Google 提供的 html5 &lt;a href=&quot;http://code.google.com/p/html5slides/&quot;&gt;模板&lt;/a&gt;。用法和 dzslides 类似。&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第三种是绚丽的 &lt;a href=&quot;http://imakewebthings.com/deck.js/&quot;&gt;deck.js&lt;/a&gt;。这玩意儿真是太炫了，刚才提到的 R 介绍就是用它做的。可惜目前我还不懂 JavaScript，但有这么漂亮的应用，JavaScript 已经排在我的学习列表里了。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;footnotes&quot;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&quot;fn1&quot;&gt;&lt;p&gt;注意一定&lt;em&gt;不要&lt;/em&gt;用 IE 观看这个展示，推荐火狐或者 Chrome。另外由于这个展示里有很多图片，而我又是直接把图片放在 &lt;a href=&quot;http://github.com/yangzetian/BUAA-Story&quot;&gt;Github&lt;/a&gt; 上的，所以加载速度会很慢。我比较推荐把源码库克隆到本地后观看，如果你执意在线查看，那好，请打开链接后泡杯茶，待三十分钟后再回来 :-)&lt;a href=&quot;#fnref1&quot;&gt;↩&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>民谣与博客</title>
   <link href="http://yangzetian.github.com/2012/04/19/folk-blog"/>
   <updated>2012-04-19T21:09:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/04/19/folk-blog</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;昨晚在图书馆六层，借着不太明亮的灯光和偶尔闪过的雷光，终于读完了&lt;a href=&quot;http://book.douban.com/subject/3178741/&quot;&gt;《来自民间的叛逆》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;书中让我印象最深刻的不是那些美国民谣歌手们成功的曲折过程，也不是他们糜烂的个人生活，而是作者在前言中对本书写作过程的介绍。作者从95年开始撰写本书，直至01年底完成80万字的初稿，最后删去约20万字后于03年出版。按作者自己的说法，这本书花去了他七年间全部的业余时间。这样的恒心和毅力不得不让人肃然起敬。作者这般心血的最终成果，便是展现在我面前的这本由700多页密密麻麻小字讲述的美国20年代民谣史，另外作者得以从此以写字为生，成为文化工作者。&lt;/p&gt;
&lt;p&gt;这本书绝不仅仅只是一部民谣史，它更像是美国文化史，除了主要讲述的那些民谣歌手，还几乎介绍了美国20年代发生的所有重大政治、经济、文化事件。也只有在这样详细介绍的美国社会大背景下，那些由借音乐之名引发的其他故事才更生动精彩。书中我最喜欢的内容包括60年代的嬉皮运动；所有和毒品、迷幻剂相关的人物事迹；两位被人忽视的民谣歌手：&lt;a href=&quot;http://en.wikipedia.org/wiki/Tim_Buckley&quot;&gt;蒂姆·巴克利&lt;/a&gt;（Tim Buckley）和&lt;a href=&quot;http://music.douban.com/musician/102593/&quot;&gt;尼克·德雷克&lt;/a&gt;（Nick Drake）。其中在介绍德雷克那张『Five Leaves Left』专辑时与欧·亨利那篇『The Last Leaf』的类比让人叫绝，也更加反衬出德雷克的不幸的一生。&lt;/p&gt;
&lt;p&gt;回想自从上月5号在二层新书架上见到这本书至现在已过去一个半月，这期间我并不是只读了这本书。但有趣的是，这本书将最近读的另外两本书串联了起来，它们分别是&lt;a href=&quot;http://book.douban.com/subject/1223765/&quot;&gt;《请宰了我》&lt;/a&gt;和&lt;a href=&quot;http://book.douban.com/subject/2090728/&quot;&gt;《LSD：我的问题少年》&lt;/a&gt;，前一本同样是介绍美国音乐故事的，但主角换成了60年代末萌芽并在70年代风靡英美的朋克摇滚，后一本则是 LSD 的合成者艾伯特·霍夫曼（Albert Hofmann）亲自书写的 LSD 逸事。我向来着迷于那些不寻常的奇异人物与事件，这几本书充分地满足了我的好奇心。&lt;/p&gt;
&lt;p&gt;当然除了读书，这四十多天来自己还做了很多事，但大多数都希望自己没有做才好，就比如中期答辩这类事，只是会凭白增加青春之苦闷罢了。但有一件事却十分有价值，那便是开了这个博客。虽说大学四年多半过得浑浑噩噩，但偶尔还是会有提笔写点东西的冲动。可惜我这个人比较懒，对折腾网页这类东西更是讨厌，开博客几乎从未进入过我的日常计划中。我基本上每天食堂图书馆自习室，要是有些情绪实在憋不住了就在校内上扔个日志完事。后来注销校内，便转战豆瓣日记，还在上面写了生平第一个技术贴。这两样东西还挺符合我的要求，因为它们都够简单，不用涉及 HTML。用 HTML 标记写文章对我来说绝对不可忍受，那些 &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt; 简直就像是散落在文字里的污渍，毫无美感可言。&lt;/p&gt;
&lt;p&gt;后来我遇到了 &lt;a href=&quot;http://wowubuntu.com/markdown/index.html&quot;&gt;Markdown&lt;/a&gt;、&lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;、&lt;a href=&quot;http://pages.github.com&quot;&gt;Github Pages&lt;/a&gt;、&lt;a href=&quot;http://johnmacfarlane.net/pandoc&quot;&gt;Pandoc&lt;/a&gt;，再后来就有了这个博客。一开始我只是把它当作一个笔记本，作用不过就是充当 Linux 下的 &lt;a href=&quot;http://www.evernote.com&quot;&gt;Evernote&lt;/a&gt;。利用 &lt;a href=&quot;http://jekyllbootstrap.com&quot;&gt;Jekyll-Bootstrap&lt;/a&gt; 和一个已有&lt;a href=&quot;http://themes.jekyllbootstrap.com/preview/the-minimum&quot;&gt;主题&lt;/a&gt;迅速搭建出一个博客原型。在熬过了中期答辩的那几天后我急需一个东西来发泄体内堆积过多的荷尔蒙，正好当时这个主题有许多我不满意的地方，因此我好好地荒废了那几天工作日，全心全意扑在了折腾博客上。经过某个彻夜奋战，我完成了一个里程碑式的改动，觉得这个博客终于算是一个可以拿出去给人看的东西了。没想到昨晚到 Windows 下浏览的时候却发现字体完全混乱，而且样式也出了问题。无奈只好再花时间折腾，要是让实验室老师知道花了这么多时间没好好干活，估计会被骂得很惨吧。&lt;/p&gt;
&lt;p&gt;在调整字体的过程中，这个系列&lt;a href=&quot;http://www.cnblogs.com/ruxpinsp1/archive/2008/04/29/font-in-front-end-development-1.html&quot;&gt;博文&lt;/a&gt;给了我很大帮助，在这里谢谢原作者。此外有个浏览器插件叫 &lt;a href=&quot;http://chengyinliu.com/whatfont.html&quot;&gt;WhatFont&lt;/a&gt;，可以实时查看当前页面中的文字所使用的字体，是个不错的小工具。现在这个博客基本上已经比较符合我对它的期望，我也不想再花时间在其外观的设置上，毕竟方便快捷地记录下自己的思考过程和最终想法才是它最重要的功能。在此列出所有在原主题基础上作出的改动：&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;将 Pandoc 设为 Jekyll 的 Markdown 渲染器。&lt;/li&gt;
&lt;li&gt;正文与标题的字体均优先选用 &lt;a href=&quot;http://www.google.com/webfonts&quot;&gt;Google Web Fonts&lt;/a&gt; 中的 &lt;a href=&quot;http://www.google.com/webfonts/specimen/Droid+Sans&quot;&gt;Droid Sans&lt;/a&gt;。中文方面 Linux 下首选&lt;a href=&quot;http://wenq.org/index.cgi?MicroHei&quot;&gt;文泉驿微米黑&lt;/a&gt;，Windows 下为微软雅黑，Mac 下则是冬青黑体。&lt;/li&gt;
&lt;li&gt;给每篇文章增加了发表时间。很多 Jekyll 的主题都默认不显示文章发表的具体时间，而是只到发布日期，这点感觉还是很奇怪的。&lt;/li&gt;
&lt;li&gt;增加代码高亮的方式。其实原本 Jekyll 即支持代码高亮，但借助 Pandoc 代码高亮可以用更&lt;a href=&quot;http://johnmacfarlane.net/pandoc/README.html&quot;&gt;简洁&lt;/a&gt;的 Markdown 语法实现。&lt;/li&gt;
&lt;li&gt;添加 &lt;a href=&quot;http://disqus.com&quot;&gt;Disqus&lt;/a&gt; 评论。&lt;/li&gt;
&lt;li&gt;添加 &lt;a href=&quot;http://feedburner.google.com&quot;&gt;FeedBurner&lt;/a&gt; 订阅。&lt;/li&gt;
&lt;li&gt;添加 &lt;a href=&quot;http://www.google.com/analytics&quot;&gt;GoogleAnalytics&lt;/a&gt; 页面分析。&lt;/li&gt;
&lt;li&gt;增加博客图标。待完成。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至于写作的完整过程，我是这样进行的：&lt;/p&gt;
&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;用 &lt;code&gt;rake post&lt;/code&gt; 新建一篇空白 Markdown 文件。&lt;/li&gt;
&lt;li&gt;用 &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; 加 Pandoc 扩展&lt;a href=&quot;http://johnmacfarlane.net/pandoc/README.html&quot;&gt;语法&lt;/a&gt;写文章。&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;jekyll --safe&lt;/code&gt; 在本地生成所有内容。&lt;/li&gt;
&lt;li&gt;用 &lt;code&gt;git push&lt;/code&gt; 将内容送至 Github 远端&lt;a href=&quot;http://yangzetian.github.com/YangBlog&quot;&gt;库&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;配置好这个写作系统后，我可以将自己的注意力全部放在文章的内容上，而不被其他因素打扰，简直就跟以前在校内、豆瓣上写日志一样。后来我又推荐了好友&lt;a href=&quot;http://marcieinred.github.com&quot;&gt;萝卜&lt;/a&gt;以这种方式开博，虽然他一开始不怎么乐意，不过后来还是经受不住零成本博客的诱惑，跳进了这个大坑。此外他是个前端高人，喜欢直接写 HTML ，没有采用 Jekyll + Markdown。我想总有一天他会后悔的 :P。&lt;/p&gt;
&lt;p&gt;读完《叛逆》后本来是想写一篇基调压抑的文章来总结最近低靡的境况，可写着写着心情却变好了起来，这大概就是博客或者说是写作的魅力吧。对我来说它还有一个吸引我的地方，因为我一直比较支持&lt;a href=&quot;http://zh.wikipedia.org/zh/%E5%AD%98%E5%9C%A8%E4%B8%BB%E4%B9%89&quot;&gt;存在主义&lt;/a&gt;的观点，可近来却常常无法真切地感受到自己的存在，只有看着这个博客的时候，才能确信自己还有颗自主独立的心灵。&lt;/p&gt;
&lt;p&gt;如果说民谣是歌手们对于社会不公的抗议，那这个博客或许就是我对青春成长的叛逆。&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>为 Jekyll 装上瑞士军刀 Pandoc</title>
   <link href="http://yangzetian.github.com/2012/04/15/jekyll-pandoc"/>
   <updated>2012-04-15T01:12:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/04/15/jekyll-pandoc</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
  &lt;style type=&quot;text/css&quot;&gt;
table.sourceCode, tr.sourceCode, td.lineNumbers, td.sourceCode {
  margin: 0; padding: 0; vertical-align: baseline; border: none; }
table.sourceCode { width: 100%; }
td.lineNumbers { text-align: right; padding-right: 4px; padding-left: 4px; color: #aaaaaa; border-right: 1px solid #aaaaaa; }
td.sourceCode { padding-left: 5px; }
code &gt; span.kw { color: #007020; font-weight: bold; }
code &gt; span.dt { color: #902000; }
code &gt; span.dv { color: #40a070; }
code &gt; span.bn { color: #40a070; }
code &gt; span.fl { color: #40a070; }
code &gt; span.ch { color: #4070a0; }
code &gt; span.st { color: #4070a0; }
code &gt; span.co { color: #60a0b0; font-style: italic; }
code &gt; span.ot { color: #007020; }
code &gt; span.al { color: #ff0000; font-weight: bold; }
code &gt; span.fu { color: #06287e; }
code &gt; span.er { color: #ff0000; font-weight: bold; }
  &lt;/style&gt;
  &lt;script src=&quot;https://d3eoax9i5htok0.cloudfront.net/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;Jekyll 原生支持 &lt;code&gt;maruku&lt;/code&gt;，&lt;code&gt;rdiscount&lt;/code&gt;，&lt;code&gt;kramdown&lt;/code&gt;，&lt;code&gt;redcarpet&lt;/code&gt; 等 markdwon 渲染器，它们各有利弊。个人认为 Maruku 虽然是 Jekyll 的默认选择，却是最不适合 中文博客的，因为它对中文列表的支持不好。Rdiscount 算是中归中举，但对于 &lt;a href=&quot;http://www.mathjax.org&quot;&gt;MathJax&lt;/a&gt; 的用户来说却比较头疼，容易出诡异的问题。Github 在后台则选用了 Redcarpet 作为其文本渲染器，因为它安全性高且性能卓越，同时它在基本 Markdown 语法的基础上增加了一些自己的特性。Kramdown 是这几个当中对基础 Markdown 语法拓展最多，也是最方便使用的，但跟这篇文章的主角 &lt;a href=&quot;http://johnmacfarlane.net/pandoc&quot;&gt;Pandoc&lt;/a&gt; 来比，它就相形见绌了。&lt;/p&gt;
&lt;p&gt;首先介绍一下 &lt;a href=&quot;http://johnmacfarlane.net/pandoc&quot;&gt;Pandoc&lt;/a&gt;，它的功能是在多种常见的标记语言进行相互转换，其中包括 Markdown, reStructuredText, Textilte, HTML, \(\LaTeX\) 等。利用它，你可以用简单的 Markdown 语法生成与 \(\LaTeX\) 一致的文档，还可以写 Beamer 演示文稿。更强大的是，它还能将以上提到的这些语言所写文件转换成 &lt;em&gt;doc&lt;/em&gt; 文档，这对我们这些体制内码农很是实用。下面这张图展示了 Pandoc 让人吃惊 的功能集，不愧为文件转换中的瑞士军刀：&lt;/p&gt;
&lt;img src=&quot;http://johnmacfarlane.net/pandoc/diagram.png&quot; alt=&quot;pandoc is awsome!&quot; width=&quot;650&quot;/&gt;
&lt;p&gt;对于用 Jekyll 写博客的人来说它还有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持在 Markdown 文档中直接使用 \(\LaTeX\) 公式，最终生成的网页更是可以选择以图片、MathJax、jsMath 等等方式显示公式&lt;/li&gt;
&lt;li&gt;支持代码高亮，并自带多种高亮方案可选。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然这两个功能都可以通过设置 Jekyll 实现，但由于我对 Pandoc 已经欲罢不能，其它的渲染器都再也看不上眼了。下面我就来介绍如何让 Jekyll 使用 Pandoc 作为 Markdown 渲染器。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;首先需要说明的是，由于 &lt;a href=&quot;http://pages.github.com&quot;&gt;Github Pages&lt;/a&gt; 并不支持 Pandoc，所以就不能将包含 Markdown 日志等文件的 Jekyll 目录直接放到 Github 库上指望 Github 帮我们渲染它们，而是需要在本地将站点完全生成好后再将它送到某一库里。有人可能觉得麻烦，但对我 来说却是一个优点，因为这样做会使 Github Pages 更新速度大大加快，不会出现今晚提交，明早才被更新好的情况。&lt;/p&gt;
&lt;p&gt;先要安装 Pandoc，具体过程请参考：&lt;a href=&quot;/2012/03/31/pandoc-cabal&quot;&gt;安装 GHC，Cabal/Cabal-install 及 Pandoc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果本机上已安装了 Jekyll 则需将其删除，因为下面要使用修改过的 Jekyll。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sudo) gem uninstall jekyll&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果本机还未安装 Jekyll，大概你也没装 Ruby 了，那么请执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sudo) yum install ruby ruby-devel rubygems
(sudo) gem install liquid classifier directory_watcher maruku kramdown albino &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下载修改过的 Jekyll，它已被修改成 Pandoc 友好型 :)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone git@github.com:yangzetian/jekyll&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;a href=&quot;https://github.com/dsanson/jekyll&quot;&gt;这里&lt;/a&gt; 有 &lt;a href=&quot;http://www.davidsanson.com/&quot;&gt;dsanson&lt;/a&gt; 的版本，作者称可以解决 Github Pages 不支持 Pandoc 的问题，不过我试了一晚愣是没搞定，所以自己写了一个。其实原理很简单，即修改&lt;code&gt;lib/jekyll/converters/markdown.rb&lt;/code&gt; 文件，在 &lt;code&gt;setup&lt;/code&gt; 和 &lt;code&gt;convert&lt;/code&gt; 中按照其它渲染器的格式增加一个 &lt;code&gt;pandoc&lt;/code&gt; 判断即可。)&lt;/p&gt;
&lt;p&gt;安装 Pandoc-ruby，一个 Pandoc 的 Ruby 接口：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(sudo) gem install pandoc-ruby&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装 Jekyll：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;gem build jekyll.gemspec
(sudo) gem install -l jekyll-0.11.2.gem&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改 Jekyll 配置文件 &lt;code&gt;_config.yml&lt;/code&gt; 如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;markdown: pandoc
pandoc:
    extensions: [mathjax, standalone]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的 &lt;code&gt;extensions&lt;/code&gt; 并不唯一，可以将任何 Pandoc 支持的选项加入其中。&lt;/p&gt;
&lt;p&gt;好了，现在我们博客中所有的 Markdown 文件已经是由 Pandoc 渲染的了！&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;下面是 Pandoc 演示环节&lt;/p&gt;
&lt;p&gt;从&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$e^x = \sum_{n=0}^\infty \frac{x^n}{n!} = \lim_{n\rightarrow\infty} (1+x/n)^n$&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到&lt;/p&gt;
&lt;p&gt;\(e^x = \sum_{n=0}^\infty \frac{x^n}{n!} = \lim_{n\rightarrow\infty} (1+x/n)^n\)&lt;/p&gt;
&lt;p&gt;从&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ {.python .numberLines}
class FSM(object):

&amp;quot;&amp;quot;&amp;quot;This is a Finite State Machine (FSM).
&amp;quot;&amp;quot;&amp;quot;

def __init__(self, initial_state, memory=None):

    &amp;quot;&amp;quot;&amp;quot;This creates the FSM. You set the initial state here. The &amp;quot;memory&amp;quot;
    attribute is any object that you want to pass along to the action
    functions. It is not used by the FSM. For parsing you would
    typically pass a list to be used as a stack. &amp;quot;&amp;quot;&amp;quot;

    # Map (input_symbol, current_state) --&amp;gt; (action, next_state).
    self.state_transitions = {}
    # Map (current_state) --&amp;gt; (action, next_state).
    self.state_transitions_any = {}
    self.default_transition = None
    ...
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到&lt;/p&gt;
&lt;table class=&quot;sourceCode python numberLines&quot;&gt;&lt;tr class=&quot;sourceCode&quot;&gt;&lt;td class=&quot;lineNumbers&quot;&gt;&lt;pre&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;sourceCode&quot;&gt;&lt;pre&gt;&lt;code class=&quot;sourceCode python&quot;&gt;&lt;span class=&quot;kw&quot;&gt;class&lt;/span&gt; FSM(&lt;span class=&quot;dt&quot;&gt;object&lt;/span&gt;):

&lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This is a Finite State Machine (FSM).&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kw&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;ot&quot;&gt;__init__&lt;/span&gt;(&lt;span class=&quot;ot&quot;&gt;self&lt;/span&gt;, initial_state, memory=&lt;span class=&quot;ot&quot;&gt;None&lt;/span&gt;):

    &lt;span class=&quot;co&quot;&gt;&amp;quot;&amp;quot;&amp;quot;This creates the FSM. You set the initial state here. The &amp;quot;memory&amp;quot;&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    attribute is any object that you want to pass along to the action&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    functions. It is not used by the FSM. For parsing you would&lt;/span&gt;
&lt;span class=&quot;co&quot;&gt;    typically pass a list to be used as a stack. &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
     
    &lt;span class=&quot;co&quot;&gt;# Map (input_symbol, current_state) --&amp;gt; (action, next_state).&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;self&lt;/span&gt;.state_transitions = {}
    &lt;span class=&quot;co&quot;&gt;# Map (current_state) --&amp;gt; (action, next_state).&lt;/span&gt;
    &lt;span class=&quot;ot&quot;&gt;self&lt;/span&gt;.state_transitions_any = {}
    &lt;span class=&quot;ot&quot;&gt;self&lt;/span&gt;.default_transition = &lt;span class=&quot;ot&quot;&gt;None&lt;/span&gt;
    ...&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.davidsanson.com&quot;&gt;dsanson 的博客&lt;/a&gt;&lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>安装 GHC, Cabal/Cabal-install 及 Pandoc</title>
   <link href="http://yangzetian.github.com/2012/03/31/pandoc-cabal"/>
   <updated>2012-03-31T00:00:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/03/31/pandoc-cabal</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;GHC 是 Glasgow Haskell Compiler 的简称，也是 Haskell Platform 的基础。最新的版本可以从&lt;a href=&quot;http://www.haskell.org/ghc/&quot;&gt;这里&lt;/a&gt;下载。&lt;/p&gt;
&lt;p&gt;进入最新版本的下载页面后有两个选择，一是二进制包，二是纯源码包。如果想从纯源码包下载，需要你本机上已装有某个版本的 ghc ，因为这个源码的大部分就事用 Haskell 写的。&lt;/p&gt;
&lt;p&gt;由于种种缘故我把之前 yum 安装的 ghc 给删了，所以这里我选择 ghc 的 linux_x86 平台二进制包。&lt;/p&gt;
&lt;p&gt;下好安装包后即是通用的 make 过程：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar xjvf ghc-7.x.x-i386-linux-unkown.tar.bz2
cd ghc-7.x.x
./configure
make install&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在可以开始安装 Cabal/Cabal-install了。&lt;/p&gt;
&lt;p&gt;Cabal 是 Haskell 的一个 package，提供了一个 Haskell 包安装框架，方便了 Haskell 包的管理。而 Cabal-install 则是另一个 Haskell 包安装库，它提供了 &lt;code&gt;cabal&lt;/code&gt; 命令行程序，该程序在安装新包时会自动解决包依赖关系，大大方便了 Haskell 包的安装。&lt;/p&gt;
&lt;p&gt;官方的建议是安装 Haskekll Platform，它整合了 GHC，Cabal，Cabal-install 等常用工具。由于我觉得 fedora repo 中的 HP 版本过老，编译 HP 又需要其他很多东西，所以就没有选取这个方案，而是自己安装 Cabal。&lt;/p&gt;
&lt;p&gt;其实 Cabal 和 Cabal-install 只要安装后者就可以了，因为安装 Cabal-install 时用的 &lt;code&gt;bootstrap&lt;/code&gt; 程序会自动下载 Cabal-install 所依赖的包，其中当然包括 Cabal。但如果你只安装前者那么后者还需要手动安装。&lt;/p&gt;
&lt;p&gt;虽说可以从 &lt;a href=&quot;http://hackage.haskell.org/package/cabal-install&quot;&gt;hackage&lt;/a&gt; 中下载 Cabal-install，但版本实在太老了。我选择从&lt;a href=&quot;http://darcs.haskell.org/cabal-branches/&quot;&gt;开发库&lt;/a&gt;中下载最新的稳定版本安装。这里有一个需要注意的是一定要保证你所用的 Cabal 版本与 Cabal-install 版本一致，也就是说从开发库中同一个版本文件夹中下载 Cabal 和 Cabal-install，否则安装时会出现麻烦。所以最好的办法就是不安装 Cabal 而直接安装 Cabal-install，这样永远不会出现冲突问题。&lt;/p&gt;
&lt;p&gt;我选择的是 &lt;a href=&quot;http://darcs.haskell.org/cabal-branches/cabal-1.14/&quot;&gt;Cabal-1.14&lt;/a&gt; 版本，把这个链接里所有的文件都用 &lt;code&gt;wget&lt;/code&gt; 下载到本地。命令如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -r -np -p http://darc.haskell.org/cabal-branches/cabal-1.14/cabal-install&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;进入Cabal-install目录后执行&lt;code&gt;sh bootstrap.sh&lt;/code&gt;，即可完成安装。如果在安装过程中出现问题，大多是因为系统缺少一些库，比如 &lt;code&gt;gmp-devel&lt;/code&gt;，&lt;code&gt;zlib-devel&lt;/code&gt; 等，需要自行用 &lt;code&gt;yum&lt;/code&gt; 搞定。&lt;/p&gt;
&lt;p&gt;安装完成Cabal-install 后，将cabal程序所在目录加入PATH中，再执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cabal update
cabal install pandoc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;好了，现在可以享受pandoc给我们带来的便利了！&lt;/p&gt;
&lt;p&gt;pandoc的使用请参考下面的&lt;em&gt;Links&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/demos.html&quot;&gt;Pandoc Demos&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://johnmacfarlane.net/pandoc/README.html&quot;&gt;Pandoc User’s Guide&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://chen.yanping.me/cn/blog/2012/03/13/pandoc/&quot;&gt;一份中文简介&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Markdown 中文列表抽风</title>
   <link href="http://yangzetian.github.com/2012/03/28/markdown"/>
   <updated>2012-03-28T16:53:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/03/28/markdown</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;用 markdown 写带中文的列表时发现 jekyll 生成的网页中有的可以正常显示，有的则不行。折腾半天，发现如果列表项中含有英文字母等非中文字符，就可以正确显示，纯中文的那些打死也不行。&lt;/p&gt;
&lt;p&gt;上网查后得知原来是 jeklly 默认 markdown 引擎 maruku 的问题，将引擎改为 rdiscount 即可。做法是修改 &lt;code&gt;_config.yml&lt;/code&gt; 文件，在 &lt;code&gt;pygments: true&lt;/code&gt; 上面添加一行 &lt;code&gt;markdown: rdiscount&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.douban.com/note/147668553/&quot;&gt;markdown 渲染引擎折腾记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.v2ex.com/t/28800&quot;&gt;中文清单 lists 问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Vim 拾遗</title>
   <link href="http://yangzetian.github.com/2012/03/27/vim"/>
   <updated>2012-03-27T13:04:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/03/27/vim</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;h2 id=&quot;索引&quot;&gt;索引&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#vimim&quot;&gt;VimIm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#markdown&quot;&gt;markdown syntax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#vimfold&quot;&gt;vim fold&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;vimim&quot;&gt;
VimIm
&lt;/h2&gt;

&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;下载 &lt;a href=&quot;http://vim.sourceforge.net/scripts/download_script.php?src_id=17150/&quot;&gt;vimim.vim&lt;/a&gt; 至 &lt;code&gt;/usr/share/vim73/plugin&lt;/code&gt; 或 &lt;code&gt;/home/.vim/plugin&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;下载 &lt;a href=&quot;http://vimim-data.googlecode.com/svn/trunk/data/vimim.pinyin.txt/&quot;&gt;vimim.pingyin.txt&lt;/a&gt;，&lt;a href=&quot;http://vimim.googlecode.com/svn/trunk/plugin/vimim.cjk.txt/&quot;&gt;vimim.cjk.txt&lt;/a&gt; 至相同目录&lt;/li&gt;
&lt;li&gt;两种工作模式：
&lt;ul&gt;
&lt;li&gt;在插入模式下输入拼音，按 CTRL-^ 直接将拼音转换为汉字。&lt;/li&gt;
&lt;li&gt;在任意模式下按 CTRL-_， 进入动态输入模式，此模式与普通输入法类似&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; vimim.cjk.txt 是一个数码字库，如果需要拼音输入或五笔输入法需配套相应的其他字库 &lt;a href=&quot;http://groups.google.com/forum/?fromgroups#!topic/vimim/zWdi6QqKdLk/&quot;&gt;[1]&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;links&quot;&gt;Links&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://vim.sourceforge.net/scripts/script.php?script_id=2506&quot;&gt;sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vimim.googlecode.com/svn/vimim/vimim.big5.html#cloud&quot;&gt;google code page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://groups.google.com/forum/?fromgroups#!topic/vimim/&quot;&gt;gogole groups&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://code.google.com/p/vimim-data/&quot;&gt;第三方词库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id='markdown'&gt;
markdown vim语法高亮
&lt;/h2&gt;

&lt;ol style=&quot;list-style-type: decimal&quot;&gt;
&lt;li&gt;下载 &lt;a href=&quot;http://plasticboy.com/dox/vim-markdown.zip&quot;&gt;mkd.vim.tar.gz&lt;/a&gt;，解压至 &lt;code&gt;.vim/&lt;/code&gt; 中&lt;/li&gt;
&lt;li&gt;里面包含两个文件夹：&lt;code&gt;ftdetect&lt;/code&gt; 和 &lt;code&gt;syntax&lt;/code&gt;，第一个用于设置 vim 的文件关联，第二个是真正的 syntax 文件&lt;/li&gt;
&lt;li&gt;如需将某种文件后缀关联为 markdown 类型，需要在 &lt;code&gt;ftdetect/mkd.vim&lt;/code&gt; 中添加后缀&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;links-1&quot;&gt;Links&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://plasticboy.com/markdown-vim-mode/&quot;&gt;mkd blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/plasticboy/vim-markdown/&quot;&gt;mkd github&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id='vimfold'&gt;
vim 折叠相关命令
&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;set foldenable/nofoldenable 
set foldmethod=syntax/indent...
set foldlevel=0/1/2...&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;links-2&quot;&gt;Links&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://man.chinaunix.net/newsoft/vi/doc/fold.html&quot;&gt;chinaunix&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 <entry>
   <title>Linux 小窍门札记</title>
   <link href="http://yangzetian.github.com/2012/03/22/linux-tricks"/>
   <updated>2012-03-22T20:33:00+08:00</updated>
   <id>hhttp://yangzetian.github.com/2012/03/22/linux-tricks</id>
   <content type="html">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
  &lt;meta http-equiv=&quot;Content-Style-Type&quot; content=&quot;text/css&quot; /&gt;
  &lt;meta name=&quot;generator&quot; content=&quot;pandoc&quot; /&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;这里用来记录Linux使用过程中得到的一些零碎却非常实用的小技巧。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;yum&quot;&gt;yum&lt;/h2&gt;
&lt;p&gt;查找哪个包提供了&lt;code&gt;makeinfo&lt;/code&gt;程序：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum provides *bin/makeinfo&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;rpm&quot;&gt;rpm&lt;/h2&gt;
&lt;p&gt;查找某个包的相关文件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rpm -qs libgfortran&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;zip&quot;&gt;zip&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;unzip xxx.zip -d destdir&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;tar&quot;&gt;tar&lt;/h2&gt;
&lt;p&gt;将foo1，foo2打包至目标target&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tar czf dir/to/target.tar.gz foo1 foo2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将target.tar.gz内容抽取至foo目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir foo; tar xzf target.tar.gz --directory=foo&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;z&quot;&gt;7z&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;7z e xxx.7z -o{DIR}&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;screenshot&quot;&gt;screenshot&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;scrot -s&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;gnome-快捷键&quot;&gt;Gnome 快捷键&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Terminal缩放&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Crtl-_  || Crtl-+&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插入系统剪切板的内容&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Shift-Ins&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;bash-快捷键&quot;&gt;Bash 快捷键&lt;/h2&gt;
&lt;h3 id=&quot;命令行编辑&quot;&gt;命令行编辑&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;移动至行首或行尾 &lt;code&gt;Crtl-a || Crtl-e&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;按单词前移或后移 &lt;code&gt;Alt-f || Alt-b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除至行首或行尾 &lt;code&gt;Ctrl-u || Ctrl-k&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;回删一个词 &lt;code&gt;Ctrl-w || Alt-Backspace || Esc-Backspace&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;后删一个词 &lt;code&gt;Alt-d&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;粘贴至光标后 &lt;code&gt;Ctrl-y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;命令行历史&quot;&gt;命令行历史&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;上一条命令 &lt;code&gt;!!&lt;/code&gt; | &lt;code&gt;!!:p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;上条以xx开头的命令 &lt;code&gt;!xx&lt;/code&gt; || &lt;code&gt;!xx:p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;参数: &lt;code&gt;!*&lt;/code&gt; || &lt;code&gt;!$&lt;/code&gt; || &lt;code&gt;!*:p&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;替换参数 &lt;code&gt;^foo^fooo&lt;/code&gt; || &lt;code&gt;^foo^fooo^&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;wget&quot;&gt;wget&lt;/h2&gt;
&lt;p&gt;从&lt;URL&gt;下载整个文件夹&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -c -r -np -k -L -p &amp;lt;URL&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;指定下载目录&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -P &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以30秒为间隔不断重新请求下载&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wget -t 0 -w 31 -c &amp;lt;URL&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;/body&gt;
&lt;/html&gt;</content>
 </entry>
 
 
</feed>